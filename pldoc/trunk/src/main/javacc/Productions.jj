// Copyright (C) 2002 Albert Tumanov

void input() throws SAXException : {}
{
  (
    (LOOKAHEAD(6) packageSpec() /*TODO package body parsing not supported | LOOKAHEAD(6) packageBody() */ | sqlPlusCommand() | LOOKAHEAD(6) table() | view() | comment())
    ("/")*
  )*
  <EOF>
}

void sqlPlusCommand() : {}
{
  // e.g. SHOW ERRORS, GRANT EXECUTE ON ... TO ...
  (LOOKAHEAD(2) (<IDENTIFIER>["."<IDENTIFIER>] | <EXECUTE> | <SET> | <ON> | <TO> | <PUBLIC> | "(" | ")" | <STRING_LITERAL>) )+
  [";"]
}

/** Recognizes a numeric literal.
* This may look like token, but it isn't. Not atomic enough.
* E.g. "+1" would be valid literal, which make parsing of "i+1" impossible
* (here, we have tokens "i", "+" and "1")
*/
Token numericLiteral() :
{ Token main = null; }
{
  (
    ["-" | "+"] main=<UNSIGNED_NUMERIC_LITERAL>
  )
  { return main; }
}

void packageSpec() throws SAXException :
{ Token schema = null, name = null, tokenCreate = null, tokenPackage = null, tokenIsAs = null; }
{
  [tokenCreate=<CREATE> [<OR> <REPLACE>]]
  tokenPackage=<PACKAGE> (LOOKAHEAD(2) schema=ID()".")? name=ID()
  {
    String schemaString = "";
    if (schema != null) {
      schemaString = schema.toString();
    }
    // now start printing the package
    m_out.pushAttribute("NAME", purifyIdentifier(name.toString()));
    m_out.pushAttribute("SCHEMA", purifyIdentifier(schemaString.toString()));
    m_out.startElement("PACKAGE");
    // possibly, package comment is here
    processPackageComment(tokenCreate);
    processPackageComment(tokenPackage);
  }
  (tokenIsAs=<AUTHID> (<CURRENT_USER> | <DEFINER>))?
  {
    // possibly, package comment is here
    processPackageComment(tokenIsAs);
  }
  (tokenIsAs=<IS> | tokenIsAs=<AS>)
  {
    // possibly, package comment is here
    processPackageComment(tokenIsAs);
  }

    declarativeSection(true)

  <END> [ID()] ";"
  { m_out.endElement("PACKAGE"); }
}

void packageBody() throws SAXException :
{ Token name=null; }
{
  [<CREATE> [<OR> <REPLACE>]]
  <PACKAGE> <BODY> (LOOKAHEAD(2) ID()".")? name=ID()
  {
    m_out.pushAttribute("NAME", purifyIdentifier(name.toString()));
    m_out.startElement("PACKAGE_BODY");
  }
  (<IS> | <AS>)

    declarativeSection(true)

  [<BEGIN> (statement())+] <END> [ID()] ";"
  { m_out.endElement("PACKAGE_BODY"); }
}

void declarativeSection(boolean isPackageLevel) throws SAXException :
{}
{
    (
/*
    collection_type_definition(isPackageLevel)
    objectDeclaration(isPackageLevel) |
    record_type_definition(isPackageLevel) |
    LOOKAHEAD(2)
    recordDeclaration(isPackageLevel) |
    LOOKAHEAD(2)
*/
    pragma(isPackageLevel) |
    LOOKAHEAD(2)
    exceptionDeclaration(isPackageLevel) |
    LOOKAHEAD(2)
    subtype_definition(isPackageLevel) |
    LOOKAHEAD(4)
    variableOrConstantDeclaration(isPackageLevel) |
    LOOKAHEAD(2)
    cursorSpec(isPackageLevel) |
    cursorBody(isPackageLevel) |
    collectionDeclaration(isPackageLevel) |
    programUnit(isPackageLevel)
    )*
}

void programUnit(boolean isPackageLevel) throws SAXException :
{
  Token start, name;
  String type;
  Hashtable tags;
}
{
  (
  (start=<FUNCTION>|start=<PROCEDURE>) name=ID()
  {
    // element generated only on the package level
    if (isPackageLevel) {
      tags = processMemberComment(start, start.toString().toUpperCase(), name.toString());
    } else {
      tags = new Hashtable();
    }
  }
  ( "(" parameterDeclaration(tags) ( "," parameterDeclaration(tags) )* ")" )*
  [<RETURN> type=datatype()
  {
    // element generated only on the package level
    if (isPackageLevel) {
      // @return
      String returnComment = null;
      Collection tagValues = (Collection) tags.get("@return");
      if (tagValues != null) {
        for(Iterator it = tagValues.iterator(); it.hasNext(); )
          returnComment = (String) it.next();
      }
      m_out.pushAttribute("TYPE", purifyIdentifier(type.toString()));
      m_out.startElement("RETURN");
      if (returnComment != null) {
        m_out.startElement("COMMENT");
        m_out.cdata(returnComment);
        m_out.endElement("COMMENT");
      }
      m_out.endElement("RETURN");
    }
  }
  ]
  {
    // element generated only on the package level
    if (isPackageLevel) {

      // modified by Steve Holt - start

      String comment = null;

      Iterator keyIt = tags.keySet().iterator();
      while (keyIt.hasNext()) {

        String key = (String)keyIt.next();
        Collection tagValues = (Collection) tags.get(key);
        if (tagValues != null) {
          for(Iterator it = tagValues.iterator(); it.hasNext(); ) {
            comment = (String) it.next();
            m_out.pushAttribute("TYPE", purifyIdentifier(key));

            // additional attribute NAME for @throws
            if (key.equals("@throws")) {
              // extract when first word - it's the exception name
              StringTokenizer st = new StringTokenizer(comment);
              if (st.hasMoreTokens()) {
                String exceptionName = st.nextToken();
                m_out.pushAttribute("NAME", purifyIdentifier(exceptionName));
                comment = comment.substring(exceptionName.length());
              }
            }

            // start TAG element
            m_out.startElement("TAG");
            if (comment != null) {
              m_out.startElement("COMMENT");
              m_out.cdata(comment);
              m_out.endElement("COMMENT");
            }
            m_out.endElement("TAG");
          }
        }
      }

      // modified by Steve Holt - end

    }
  }
  [<DETERMINISTIC>]
  [<PARALLEL_ENABLE>]
  [<PIPELINED>]
  // body
  [
    (<IS> | <AS>)
    (
      LOOKAHEAD(2)
      callSpecTail(isPackageLevel)
      |
      (
        declarativeSection(false)
        <BEGIN> (LOOKAHEAD(statement()) statement())+
        [ <EXCEPTION>
          (<WHEN> ID() <THEN> (statement())+ )+
        ]
        <END> [ID()]
      )
    )
  ]
  // end of body
  ";"
  )
  {
    // element generated only on the package level
    if (isPackageLevel) {
      m_out.endElement(purifyIdentifier(start.toString().toUpperCase()));
    }
  }
}

void parameterDeclaration(Hashtable tags) throws SAXException :
{
  Token name;
  String paramMode = "", paramType, paramDefault = "";
}
{
  name=ID()
  // the order of outer "|" is important !
  ( LOOKAHEAD(2) ( LOOKAHEAD(2) ( (<OUT>{paramMode = "OUT";}|(<IN> <OUT>{paramMode = "IN OUT";})) (LOOKAHEAD(2) <NOCOPY>)? ) | <IN> ) )?
  paramType=datatype()
  ( (":="|<_DEFAULT>) paramDefault=expression() )?
  {
    String paramName = name.toString();
    String paramComment = getParamComment(paramName, tags);
    m_out.pushAttribute("NAME", purifyIdentifier(paramName));
    m_out.pushAttribute("MODE", paramMode);
    m_out.pushAttribute("TYPE", purifyIdentifier(paramType));
    m_out.pushAttribute("DEFAULT", purifyIdentifier(paramDefault));
    m_out.startElement("ARGUMENT");
    if (paramComment != null) {
      m_out.startElement("COMMENT");
      m_out.cdata(paramComment);
      m_out.endElement("COMMENT");
    }
    m_out.endElement("ARGUMENT");
  }
}

String datatype() :
{ String name; }
{
  (
    // this should be first
    LOOKAHEAD(2) name=scalar_datatype_name()
    |
    (
      ( [LOOKAHEAD(2) <REF>] name=qualifiedName() ["%" (<TYPE>{name += "%TYPE";}|<ROWTYPE>{name += "%ROWTYPE";})] )
    )
  )
  { return name; }
}

String scalar_datatype_name() :
{ Token size=null, precision=null;
  String name = null;
}
{
  (
  // scalar types - numeric:
  <BINARY_INTEGER> | <DEC> | <DECIMAL> | (<DOUBLE><PRECISION> {name = "DOUBLE PRECISION";}) |
  <FLOAT> | <INT> | <INTEGER> | <NATURAL> |
  <NATURALN> | <NUMBER> | <NUMERIC> | <PLS_INTEGER> | <POSITIVE> | <POSITIVEN> | <REAL> | <SIGNTYPE> |
  <SMALLINT> |

  // scalar types - character:
  <CHAR> | <CHARACTER> | LOOKAHEAD(2) (<LONG><RAW> {name = "LONG RAW";}) | <LONG> |
  <NCHAR> | <NVARCHAR2> | <RAW> | <ROWID> |
  <STRING> | <UROWID> | <VARCHAR> | <VARCHAR2> |

  // scalar types - boolean:
  <BOOLEAN> |

  // composite types
  <TABLE> | <VARRAY> | (<VARYING><ARRAY> {name = "VARYING ARRAY";}) |
  // <RECORD> - defined elsewhere

  // LOB types
  <BFILE> | <BLOB> | <CLOB> | <NCLOB> |

  // reference types
  (<REF><CURSOR> {name = "REF CURSOR";}) |
  //<REF> object_type - defined elsewhere

  // scalar types - date/time:
  <DATE> |
  LOOKAHEAD(2) (<INTERVAL><DAY><TO><SECOND> {name = "INTERVAL DAY TO SECOND";}) |
  (<INTERVAL><YEAR><TO><MONTH> {name = "INTERVAL YEAR TO MONTH";}) |
  LOOKAHEAD(3) (<TIMESTAMP> <WITH> <LOCAL> <TIME> <ZONE> {name = "TIMESTAMP WITH LOCAL TIME ZONE";}) |
  LOOKAHEAD(2) (<TIMESTAMP> <WITH> <TIME> <ZONE> {name = "TIMESTAMP WITH TIME ZONE";}) |
  <TIMESTAMP>
  )

  {
    if (name == null) {
      name = token.toString();
    }
  }
  (LOOKAHEAD(2) "(" size=numericLiteral() {name += "(" + size;}
    ["," precision=numericLiteral() {name += "," + precision;}]
  ")" {name += ")";})?
  { return name; }
}

String qualifiedName() :
{
  Token schema = null;
  Token packageName = null;
  Token packageMember = null;
  Token packageMembersMember = null;
  Token name = null;
}
{
  (
    [LOOKAHEAD(2) schema=<IDENTIFIER> "."]   // schema
    [LOOKAHEAD(2) packageName=<IDENTIFIER> "."]   // package
    [LOOKAHEAD(2) packageMember=<IDENTIFIER> "."]   // package member
    [LOOKAHEAD(2) packageMembersMember=<IDENTIFIER> "."]   // package member's member
    name=ID() 	// simple or prefixed with schema
    ["@" <IDENTIFIER>]					// remote
  )
  {
    String fullName;
    fullName =
      ((schema == null)? "":schema + ".") +
      ((packageName == null)? "":packageName + ".") +
      ((packageMember == null)? "":packageMember + ".") +
      ((packageMembersMember == null)? "":packageMembersMember + ".") +
      ((name == null)? "":name.toString());
    return fullName;
  }
}

void statement() throws SAXException :
{}
{
  // null statement
  LOOKAHEAD(2) <NULL> ";" |

  // return
  LOOKAHEAD(2) <RETURN> expression() ";" |

  // function call (should be the last to recognize)
  LOOKAHEAD(variableOrFunctionCall() ";")
    variableOrFunctionCall() ";" |

  // assignment
  LOOKAHEAD(qualifiedName()[(expression())] ":=")
    qualifiedName()[(expression())] ":=" expression() ";" |

  // FOR
  LOOKAHEAD(2)
  <FOR> ID() <IN>
    (
      LOOKAHEAD(4) ([LOOKAHEAD(2) <REVERSE>] expression() [".."expression()]) |
      (ID() "(" expression() ("," expression())* ")") |
      ("(" select() ")")
    )
  <LOOP> (statement())+ <END> <LOOP> [ID()] ";" |

  // WHILE
  <WHILE> expression() <LOOP> (statement())+ <END> <LOOP> [ID()] ";" |

  // LOOP
  <LOOP> (statement())+ <END> <LOOP> [ID()] ";" |

  // EXIT
  <EXIT> [ID()] <WHEN> expression() ";" |

  // IF
  LOOKAHEAD(2) <IF> expression() <THEN> (LOOKAHEAD((statement())+) statement())+
  [(<ELSIF>|<ELSE>) (statement())+]
  <END> <IF> ";" |

  // compound statement
  <BEGIN> (statement())+ <END> ";" |

  // raise
  LOOKAHEAD(2) <RAISE> ID() ";" |

  // select
  select() ";"
  // insert
  // update
  // delete
  // label <<ID()>>

}

void subtype_definition(boolean isPackageLevel) throws SAXException :
{
  Token start, subtype_name=null, constraint=null, element_type=null;
  Token collection = null, collection2 = null;
  String baseType = null, returnType = null, indexBy = null;
  Hashtable tags = null;
  int lastField = 0;
}
{

  (
    ( start=<SUBTYPE> subtype_name=<IDENTIFIER>
      {
        // element generated only on the package level
        if (isPackageLevel) {
          tags = processMemberComment(start, "TYPE", subtype_name.toString());
        }
      }
      <IS> baseType=datatype() ("(" constraint=<IDENTIFIER> ")")? (<NOT> <NULL>)?
      {
        returnType = baseType;
        if (constraint != null) {
          returnType += "(" + constraint + ")";
        }
      }
    ) |
    ( start=<TYPE> subtype_name=<IDENTIFIER>
      {
        // element generated only on the package level
        if (isPackageLevel) {
          tags = processMemberComment(start, "TYPE", subtype_name.toString());
        }
      }
      <IS>
      (
        (<RECORD> {baseType = "RECORD";} "(" fieldDeclaration(isPackageLevel, tags) ("," fieldDeclaration(isPackageLevel, tags))* ")" )
        {
          returnType = "RECORD";
          // end for
        }
        |
        ((collection=<TABLE> | collection=<VARRAY> | collection=<VARYING> collection2=<ARRAY>)["(" constraint=numericLiteral() ")"]
        <OF> baseType=datatype() (<NOT> <NULL>)? (<INDEX> <BY> indexBy=datatype())?)
        {
          returnType = collection.toString();
          if (collection2 != null) {
            returnType += " " + collection2;
          }
          if (constraint != null) {
            returnType += "(" + constraint + ")";
          }
          returnType += " OF " + baseType + " INDEX BY " + indexBy;
        }
        |
        <REF> <CURSOR> [<RETURN> baseType=datatype()]
        {
          returnType = "REF CURSOR";
          if (baseType != null) {
            returnType += " RETURN " + baseType;
          }
        }
      )
    )
  )
  ";"
  {
    // element generated only at the package level
    if (isPackageLevel) {
      if (returnType != null) {
        m_out.pushAttribute("TYPE", returnType);
        m_out.element("RETURN");
      }
      m_out.endElement("TYPE");
    }
  }
}

void fieldDeclaration(boolean isPackageLevel, Hashtable tags) throws SAXException :
{
  Token name;
  String dataType;
}
{
  name=ID() dataType=datatype() ( (<NOT> <NULL>)? (":=" | <_DEFAULT>) expression() )?
  {
    if (isPackageLevel) {
      String paramName = name.toString();
      String paramComment = getParamComment(paramName, tags);
      m_out.pushAttribute("NAME", purifyIdentifier(paramName));
      m_out.pushAttribute("TYPE", purifyIdentifier(dataType));
      m_out.startElement("FIELD");
      if (paramComment != null) {
        m_out.startElement("COMMENT");
        m_out.cdata(paramComment);
        m_out.endElement("COMMENT");
      }
      m_out.endElement("FIELD");
    }
  }
}

void collection_type_definition() : {} { <IDENTIFIER> }
void collectionDeclaration(boolean isPackageLevel) : {} { <IDENTIFIER> }
void objectDeclaration() : {} { <IDENTIFIER> }

/** Java stored procedure, external function*/
void callSpecTail(boolean isPackageLevel) : {}
{
  <LANGUAGE> (/*"C"*/<IDENTIFIER> | <JAVA>)

  /*"NAME"*/<IDENTIFIER> <STRING_LITERAL>
  /* ### or:
    LIBRARY library_name
    [NAME c_string_literal_name]
    [WITH CONTEXT]
    [PARAMETERS (external_parameter[, external_parameter]...)];

    Where library_name is the name of your alias library, c_string_literal_name is the name of your external C procedure, and external_parameter stands for:

    {  CONTEXT
     | SELF [{TDO | property}]
     | {parameter_name | RETURN} [property] [BY REFERENCE] [external_datatype]}

    where property stands for:

    {INDICATOR [{STRUCT | TDO}] | LENGTH | MAXLEN | CHARSETID | CHARSETFORM}
  */
}

/** Cursor (common part of specification and body) */
void cursorUnit(boolean isPackageLevel) throws SAXException :
{
  Token start, name;
  String type;
  Hashtable tags = new Hashtable();
}
{
  (
  start=<CURSOR> name=ID()
  {
    // element generated only on the package level
    if (isPackageLevel) {
      tags = processMemberComment(start, start.toString().toUpperCase(), name.toString());
    } else {
      tags = new Hashtable();
    }
  }
  ( "(" parameterDeclaration(tags) ( "," parameterDeclaration(tags) )* ")" )*
  [<RETURN> type=datatype()
  {
    // element generated only on the package level
    if (isPackageLevel) {
      String returnComment = null;
      Collection tagValues = (Collection) tags.get("@return");
      if (tagValues != null) {
        Iterator it = tagValues.iterator();
        while (it.hasNext())
          returnComment = (String) it.next();
      }
      m_out.pushAttribute("TYPE", purifyIdentifier(type.toString()));
      m_out.startElement("RETURN");
      if (returnComment != null) {
        m_out.startElement("COMMENT");
        m_out.cdata(returnComment);
        m_out.endElement("COMMENT");
      }
      m_out.endElement("RETURN");
    }
  }
  ]
  )
  {
    // element generated only on the package level
    if (isPackageLevel) {
      m_out.endElement(purifyIdentifier(start.toString().toUpperCase()));
    }
  }
  (";" | <IS> select() ";")
}

void cursorSpec(boolean isPackageLevel) throws SAXException : {}
{
  cursorUnit(isPackageLevel)
}

void cursorBody(boolean isPackageLevel) throws SAXException : {}
{
  cursorUnit(isPackageLevel)
//  <IS> select() ";"
}


/* EXPRESSIONS */

/** This production allows type-ignorant expressions with boolean, character,
* numeric and data variables or function calls intermixed.
* Without that, would need to know types of variables and return types of function calls,
* not possible without a symbol table.
*/

/*###
void expression() : {}
{
  "(" expression() ")"
  |
  "**" expression()
  |
  (
    expressionTerm()
    ( LOOKAHEAD(2) (<AND> | <OR> | "||" | "+" | "-" | "*" | "/") expression() )*
    //### +other_boolean_form !
  )
}
###*/
/** This is not term in classical sense.
* Just had to split the left recursion.
*/
/*###
void expressionTerm() : {}
{
  LOOKAHEAD(2) (LOOKAHEAD(2) <NOT>)?
  variableOrFunctionCall() | numericLiteral()
    | LOOKAHEAD(2) <TRUE> | LOOKAHEAD(2) <FALSE>
    | <CHARACTER_LITERAL> | <STRING_LITERAL> |
  LOOKAHEAD(2) ((<IDENTIFIER>|<SQL>) "%" "ROWCOUNT") |
  qualifiedName()
  (
    "." ("COUNT" | "FIRST" | "LAST" | "LIMIT" | (("NEXT"|<PRIOR>|<EXISTS>) "(" numericLiteral() ")") )
    |
    "%" ("FOUND"|"ISOPEN"|"NOTFOUND"|("BULK_ROWCOUNT" "(" numericLiteral() ")"))
  )
}
###*/

String expression() :
{ String result = "", fname = ""; Token token = null;}
{
  (
  ("(" result = expression() ")")
  |
  (
    (
      LOOKAHEAD(2) (LOOKAHEAD(2) <NOT>)?
      // function call must be before variable name, otherwise it will be confused
      fname=variableOrFunctionCall() {result += fname;} | token=numericLiteral() {result += token;}
        | LOOKAHEAD(2) <TRUE> | LOOKAHEAD(2) <FALSE> | <CHARACTER_LITERAL> | <STRING_LITERAL> |
      LOOKAHEAD(2) ((<IDENTIFIER>|<SQL>) "%" "ROWCOUNT") |
      LOOKAHEAD(2)
      ( <IDENTIFIER> "." ("COUNT" | "FIRST" | "LAST" | "LIMIT" | (("NEXT"|<PRIOR>|<EXISTS>) "(" numericLiteral() ")") ) ) |
      ( <IDENTIFIER> "%" ("FOUND"|"ISOPEN"|"NOTFOUND"|("BULK_ROWCOUNT" "(" numericLiteral() ")")) ) |
      ( <SQL> "%" "BULK_ROWCOUNT" "(" numericLiteral() ")" )
      // other_boolean_form:
      //### | expression() ( relationalOperator() expression() | <IS> [<NOT>] <NULL> /*### | [<NOT>]...*/)
    )
    ["**" expression()]
    ( LOOKAHEAD(2) (<AND> | <OR> | "||" | "+" | "-" | "*" | "/" | relationalOperator()) expression() )*
  )
  )
  { return result; }
}

void relationalOperator() :
{}
{
  "=" | "<>" | "!=" | "~=" | "^=" | "<" | ">" | "<=" | ">="
}

String variableOrFunctionCall() :
{ String token; }
{
  (
  token=qualifiedName()
  [
    "("
    [
            [LOOKAHEAD(2) <IDENTIFIER> "=>"] expression()
      ( "," [LOOKAHEAD(2) <IDENTIFIER> "=>"] expression() )*
    ]
    ")"
  ]
  ) {return token;}
}

/* LITERALS */
/*
void numericLiteral() : {} { <IDENTIFIER> }
void integer() : {} { <IDENTIFIER> }
void realNumber() : {} { <IDENTIFIER> }
void stringLiteral() : {} { <IDENTIFIER> }
void booleanLiteral() : {} { <IDENTIFIER> }
*/

/* Constants and Variables */
/*void variableDeclaration(boolean isPackageLevel) :
{ Token variableName=null; Hashtable tags = null;
  String variableType;
}
{
  variableName=<IDENTIFIER> variableType=datatype() [[<NOT> <NULL>] (":=" | <_DEFAULT>) expression()] ";"
  {
    // element generated only on the package level
    if (isPackageLevel) {
      tags = processMemberComment(variableName, "VARIABLE", variableName.toString());
      m_out.pushAttribute("TYPE", purifyIdentifier(variableType));
      m_out.startElement("RETURN");
      m_out.endElement("RETURN");
      m_out.endElement("VARIABLE");
    }
  }
}*/

/*void constantDeclaration(boolean isPackageLevel) :
{ Token constantName = null;
  String constantType;
  Hashtable tags = null;
}
{
  constantName=ID() <CONSTANT> constantType=datatype()
  [<NOT> <NULL>]
  (":=" | <_DEFAULT>) expression() ";"
  {
    // element generated only on the package level
    if (isPackageLevel) {
      tags = processMemberComment(constantName, "CONSTANT", constantName.toString());
      m_out.pushAttribute("TYPE", "CONSTANT " + purifyIdentifier(constantType));
      m_out.startElement("RETURN");
      m_out.endElement("RETURN");
      m_out.endElement("CONSTANT");
    }
  }
}*/

void variableOrConstantDeclaration(boolean isPackageLevel) throws SAXException :
{ Token name=null;
  String type;
  Hashtable tags = null;
  String elementName = "VARIABLE";
}
{
  name=ID() [LOOKAHEAD(2) <CONSTANT> {elementName = "CONSTANT";}] type=datatype()
  [[<NOT> <NULL>]
  (":=" | <_DEFAULT>) expression()] ";"
  {
    // element generated only on the package level
    if (isPackageLevel) {
      tags = processMemberComment(name, elementName, name.toString());
      m_out.pushAttribute("TYPE", purifyIdentifier(type));
      m_out.startElement("RETURN");
      m_out.endElement("RETURN");
      m_out.endElement(elementName);
    }
  }
}

void datatypeDeclaration() : {} { <IDENTIFIER> }

void pragma(boolean isPackageLevel) throws SAXException :
{ Token start,name,functionName,exceptionName,errorNumber; Hashtable tags = null; }
{
  start=<PRAGMA>
  (
    name=<SERIALLY_REUSABLE>
    |
    name=<AUTONOMOUS_TRANSACTION>
    |
    name=<RESTRICT_REFERENCES> "(" (functionName=ID() /*| <_DEFAULT>*/)
    ("," (ID() | <STRING_LITERAL>) )+  ")"
    |
    name=<EXCEPTION_INIT> "(" exceptionName=<IDENTIFIER> "," errorNumber=numericLiteral() ")"
  )
  ";"
  {
    // element generated only on the package level
    if (isPackageLevel) {
      tags = processMemberComment(start, start.toString().toUpperCase(), name.toString());
      m_out.endElement("PRAGMA");
    }
  }
}

void exceptionDeclaration(boolean isPackageLevel) throws SAXException :
{ Token exception_name; Hashtable tags = null; }
{
  exception_name=<IDENTIFIER> <EXCEPTION> ";"
  {
    // element generated only on the package level
    if (isPackageLevel) {
      tags = processMemberComment(exception_name, "EXCEPTION", exception_name.toString());
      m_out.endElement("EXCEPTION");
    }
  }
}

void select() :
{}
{
  ("(" select() ")")
  |
  (
  <SELECT>
         [LOOKAHEAD(2) <IDENTIFIER> "."] (expression() | "*") [<IDENTIFIER>]
    ("," [LOOKAHEAD(2) <IDENTIFIER> "."] (expression() | "*") [<IDENTIFIER>])*
  <FROM> (qualifiedName() | ("(" select() ")")) [LOOKAHEAD(2) <IDENTIFIER>]
    ("," (qualifiedName() | ("(" select() ")")) [LOOKAHEAD(2) <IDENTIFIER>] )*
  [<WHERE> expression()]
  [(<UNION> [<ALL>] | <INTERSECT> | <MINUS>) select() ]
  [LOOKAHEAD(2) <GROUP> <BY> qualifiedName() ("," qualifiedName())*]
  [LOOKAHEAD(2) <ORDER> <BY> qualifiedName() ("," qualifiedName())*]
  )
}
