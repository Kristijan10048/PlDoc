
/*
 * Start Sql Parser
 */

//http://docs.oracle.com/cd/B19306_01/server.102/b14200/Statements_4010.htm
//http://docs.oracle.com/database/121/PLSQLRF/Statements_4011.htm#PLSQLRF01110
void CommitStatement()    :
{}
{
	<COMMIT> [<WORK>]
        [
		( <COMMENT> StringLiteral() [ <WRITE> [ <IMMEDIATE> | <BATCH>  ] [ <WAIT> | <NOWAIT>  ] ] )
		|
		( <FORCE>	(
				  <CORRUPT_XID_ALL> 
				| <CORRUPT_XID> StringLiteral() 
				| StringLiteral() [ "," NumericLiteral() ] )
				)
        ]
}

//http://docs.oracle.com/cd/B19306_01/server.102/b14200/Statements_9021.htm#PLSQLRF01610
//http://docs.oracle.com/database/121/PLSQLRF/Statements_9022.htm#PLSQLRF01610
void RollbackStatement()    :
{}
{
	<ROLLBACK> [ <WORK> ]
        [
		( <TO> [ <SAVEPOINT> ] ID() )
		|
		( <FORCE> StringLiteral() [ "," NumericLiteral() ]  )
        ]
}

//http://docs.oracle.com/cd/B19306_01/server.102/b14200/Statements_10001.htm#BABFIJGC
//http://docs.oracle.com/database/121/PLSQLRF/Statements_10001.htm#PLSQLRF01701
void SavepointStatement()    :
{}
{
	 <SAVEPOINT> ID() 
}

//http://docs.oracle.com/cd/B19306_01/server.102/b14200/Statements_9021.htm#PLSQLRF01610
//http://docs.oracle.com/database/121/PLSQLRF/Statements_10005.htm#PLSQLRF01705
void SetTransactionStatement()    :
{}
{
	<SET> <TRANSACTION> 
        [
		(  <READ>  ( <ONLY> | <WRITE> )  )
		|
		( <ISOLATION> <LEVEL> ( <SERIALIZABLE>  | <READ> <COMMITTED>  ) )
		|
		( <USE> <ROLLBACK> <SEGMENT> ID() )
        ]
	<NAME> StringLiteral()
}

//http://docs.oracle.com/cd/B12037_01/appdev.101/b10807/13_elems027.htm
void LockTableStatement()    :
{}
{
	//ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE, SHARE, SHARE ROW EXCLUSIVE, or EXCLUSIVE.
	 <LOCK> <TABLE> QualifiedID()  <IN>  
         (
		<ROW> ( <SHARE> | <EXCLUSIVE> )
		|  <SHARE> [ <UPDATE> | <ROW> <EXCLUSIVE> ]
		| <EXCLUSIVE> 
	 )
	<MODE> [ <NOWAIT> ]  
}

//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#i2065706
void SqlSelectStatement()    :
{
}
{
{System.err.println("SqlSelectStatement: attempting SqlSelectStatement()"); }
{System.err.println("SqlSelectStatement: attempting SqlSubquery() from line "+token.beginLine+", column "+token.beginColumn
				+" - \""+token.image+"\" "
				+" next -> "+token.next+"\" "
		   ); }
	
	SqlSubquery()
{System.err.println("SqlSelectStatement: completed SqlSubquery()"); }
	[ SqlForUpdateClause() ]

{System.err.println("SqlSelectStatement: completed SqlSelectStatement()"); }
}


//http://docs.oracle.com/cd/B19306_01/appdev.102/b14261/delete_Statement.htm#i33716
//http://docs.oracle.com/database/121/PLSQLRF/Statements_8005.htm#i2112830
void SqlDeleteStatement()    :
{
}
{
{System.err.println("SqlDeleteStatement: attempting SqlDeleteStatement()"); }
	<DELETE> [ <FROM> ] 
	(
		<ONLY> <LPAREN> SqlDmlTableExpression() <RPAREN>
		| SqlDmlTableExpression() 
	) 

	//Table Alias 
	[ UnqualifiedID() ] // alias	
	//LOOKAHEAD( { !"WHERE".equalsIgnoreCase(getToken(1).image) } ) { thisToken = getNextToken() ; }

	[
		<WHERE> 
		( <CURRENT> <OF> UnqualifiedID() //Cursor Name 
		| SqlCondition()
		)
	]

	[ SqlReturningClause() ]

	[ SqlErrorLoggingClause() ]


}



void SqlDmlTableExpression()    :
{
Token thisToken;  
String string = null; 
StringBuffer sb = new StringBuffer() ;
String objectReference = null; 
}
{
{System.err.println("SqlDMlTableExpression: attempting SqlDMlTableExpression()"); }
		<TABLE> <LPAREN> SqlSubquery() <RPAREN>   
		| string = QualifiedName()  { sb.append(string); } [ "@" string = QualifiedName() /* DBLink Name */  { sb.append("@"); sb.append(string); } ]  { objectReference = sb.toString(); }
 {System.err.println("SqlDmlTableExpression: found OBJECT REFERENCE " + objectReference + " at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
		| <LPAREN> SqlSubquery() <RPAREN>

}

//http://docs.oracle.com/cd/B28359_01/server.111/b28286/Statements_9016.htm
void SqlMergeStatement()    :
{ 
Token thisToken = null ; 
}
{
{System.err.println("SqlMergeStatement: attempting SqlMergeStatement()"); }
	<MERGE> <INTO> QualifiedName() //Table Name

	//Table Alias 
	LOOKAHEAD( { !"USING".equalsIgnoreCase(getToken(1).image) } ) { thisToken = getNextToken() ; }

	<USING> 
	(
	  ( <LPAREN> SqlSubquery() <RPAREN> )
	  |
	  QualifiedName() 
	)

	//Target Alias 
	 { if (!"ON".equalsIgnoreCase(getToken(1).image) ) thisToken = getNextToken() ; 
	//LOOKAHEAD( { !"ON".equalsIgnoreCase(getToken(1).image) } ) { thisToken = getNextToken() ; 
System.err.println("SqlMergeStatement: after potential target alias at Line " + thisToken.beginLine + ", column " + thisToken.beginColumn
			+ " - looking past " + " \"" + thisToken.image + "\""); 
                                                                   }

	<ON> <LPAREN> SqlCondition() <RPAREN>
	// Matched Clause
	<WHEN> <MATCHED> <THEN> 
	<UPDATE> <SET> 
	QualifiedName() 
	"=" 
	(
		<_DEFAULT>
		|
		SqlExpression() 
		
	)
	(
		","
		QualifiedName() 
		"=" 
		(
		  <_DEFAULT>
		  |
		  SqlExpression() 
		)
	)*
	//WHERE 
	[ SqlWhereClause() ]

	[ <DELETE> SqlWhereClause() ]
	
	
	<WHEN> <NOT> <MATCHED> <THEN> 
	<INSERT> 
	<LPAREN>
		//Column Alias List 
		QualifiedID() ( "," QualifiedID() )* 
	<RPAREN>
	<VALUES> 
	<LPAREN>
		(
			<_DEFAULT>
			|
			SqlExpression() 
			
		)
		(
			","
			(
			  <_DEFAULT>
			  |
			  SqlExpression() 
			)
		)*
	<RPAREN>
	[ SqlWhereClause() ]

	[ SqlErrorLoggingClause() ]
 

}



void SqlErrorLoggingClause()    :
{}
{
	<LOG> <ERRORS> 
	[
		<INTO> QualifiedName() 
		<LPAREN>
			SqlExpression() 
		<RPAREN>
	]

	[
		<REJECT> <LIMIT> ( <UNLIMITED> | NumericLiteral() )
	]

}

//http://docs.oracle.com/database/121/PLSQLRF/Statements_9014.htm#sthref7054
//http://docs.oracle.com/database/121/PLSQLRF/Statements_9014.htm#i2111652
void SqlInsertStatement()    :
{
}
{
{System.err.println("SqlInsertStatement: attempting SqlInsertStatement()"); }

	<INSERT> 
	(
		//Single-Table INSERT 
		LOOKAHEAD(1,<INTO>)
		(
{System.err.println("SqlInsertStatement: attempting Single Table Insert()"); }
			//INSERT INTO Clause 
			SqlInsertIntoClause() 
			(
				//Values Clause 
				(
					SqlValuesClause() 
					[ SqlReturningClause() ] 
				)
				| SqlSubquery() 
			)


			[ SqlErrorLoggingClause() ]

			
		)
		//Multi-Table INSERT 
		|
		(
			LOOKAHEAD(2,<ALL> <INTO>)
			(
				(
{System.err.println("SqlInsertStatement: attempting Multi-Table Insert"); }
					<ALL> 
					
					(
					  //INSERT INTO Clause 
					  SqlInsertIntoClause() 
					  
					  //Values Clause 
					  SqlValuesClause() 

					  [ SqlErrorLoggingClause() ]
					)+
				)
			)
			| //Conditional Multi-table INSERT 
			(
{System.err.println("SqlInsertStatement: attempting Conditional Multi-Table Insert"); }
				[ <FIRST> | <ALL> ]
				
				( 
				    <WHEN> SqlCondition() <THEN> 

				    (
				      //INSERT INTO Clause 
				      SqlInsertIntoClause() 
				      
				      //Values Clause 
				      SqlValuesClause() 

				      [ SqlErrorLoggingClause() ]
				    )+
				)+

				<ELSE> 
				(
				  //INSERT INTO Clause 
				  SqlInsertIntoClause() 
				  
				  //Values Clause 
				  SqlValuesClause() 

				  [ SqlErrorLoggingClause() ]
				)+
			)
			SqlSubquery() 
		)
	)
  {System.err.println("SqlInsertStatement: before SqlReturningClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

	[ SqlReturningClause() ]
  {System.err.println("SqlInsertStatement: after SqlReturningClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

	[ SqlErrorLoggingClause() ]

  {System.err.println("SqlInsertStatement: after SqlErrorLoggingingClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}




void SqlInsertIntoClause()    :
{}
{
{System.err.println("SqlInsertClause: attempting SqlInsertClause()"); }

	//INTO Table Clause 
	<INTO>
	SqlDmlTableExpression() 

	[ UnqualifiedID() ] //Alias   

	[
	  LOOKAHEAD( <LPAREN> UnqualifiedID() )
		(
		<LPAREN>
			//Column Alias List 
			UnqualifiedID() ( "," UnqualifiedID() )* 
		<RPAREN>
		)
	]

}



void SqlValuesClause()    :
{}
{
{System.err.println("SqlValuesClause: attempting SqlValuesClause()"); }
	<VALUES> 
	(
	  (
	    <LPAREN>
		    (
			    <_DEFAULT>
			    |
			    SqlExpression() 
		    )
		    (
			    ","
			    (
			      <_DEFAULT>
			      |
			      SqlExpression() 
			    )
		    )*
	    <RPAREN>
	  )
	  | QualifiedName() //Record variable 
	)
	

}


//http://docs.oracle.com/cd/B19306_01/appdev.102/b14261/update_Statement.htm#i36431
void SqlUpdateStatement()    :
{
Token thisToken;  
String string = null; 
StringBuffer sb = new StringBuffer() ;
String objectReference = null; 
}
{
{System.err.println("SqlUpdateStatement: attempting SqlUpdateStatement()"); }
	<UPDATE> 
	(
		string = QualifiedName() { sb.append(string); }  [ "@" string = QualifiedName() /* DBLink Name */  { sb.append("@"); sb.append(string); ;} ]   { objectReference = sb.toString(); }
 {System.err.println("SqlUpdateStatement: found OBJECT REFERENCE " + objectReference + " at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
		| <LPAREN> SqlSubquery() <RPAREN>
		| <TABLE> <LPAREN> SqlSubquery() <RPAREN>   
	) 
	(
	   <SET> 
	 |
	   (
  {System.err.println("SqlUpdateStatement: attempting alias keyword"); }
	      UnqualifiedID()  // alias	
  {System.err.println("SqlUpdateStatement: attempting SET keyword"); }
	      <SET> 
  {System.err.println("SqlUpdateStatement: attempting GOT keyword"); }
	   )
	)
	( 
{System.err.println("SqlUpdateStatement: attempting column assignments"); }
	  SqlColumnAssignment() ( "," SqlColumnAssignment()  )*
	)
	[
{System.err.println("SqlUpdateStatement: attempting WHERE clause"); }
		<WHERE> 
		( <CURRENT> <OF> UnqualifiedID() //Cursor Name 
		| SqlCondition()
		)
	]

	[ SqlReturningClause() ]

	[ SqlErrorLoggingClause() ]

}


void SqlColumnAssignment()    :
{}
{
{System.err.println("SqlColumnAssignment: attempting SqlColumnAssignment()"); }

	// Multi-column assigment 
	(
		<LPAREN>
			//Column Alias List 
			QualifiedID() ( "," QualifiedID() )* 
		<RPAREN>
		"="
		 <LPAREN> SqlSubquery() <RPAREN> 
	)
	|
	// Single-column assignment 
	(
{System.err.println("SqlColumnAssignment: attempting Single-ColumnAssignment()"); }
		QualifiedName() "=" 
		(
			LOOKAHEAD(2, <LPAREN> <SELECT> ) ( <LPAREN> SqlSubquery() <RPAREN> )
			| 
			SqlExpression() 
		)
{System.err.println("SqlColumnAssignment: after Single-ColumnAssignment()"); }
	)
}


//http://docs.oracle.com/cd/B19306_01/appdev.102/b14261/returninginto_clause.htm#CJAGFGDE
void SqlReturningClause()    :
{}
{
 {System.err.println("SqlReturningClause: attempting SqlReturningClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	( <RETURN> | <RETURNING> ) SqlExpression() ("," SqlExpression())* [<BULK> <COLLECT>] <INTO> SqlExpression() ("," SqlExpression())*

 {System.err.println("SqlReturningClause: Completed SqlReturningClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}

//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#i2126016
void SqlForUpdateClause()    :
{}
{
	
	<FOR> <UPDATE> 
	[ 
		<OF> Name() ( "," Name() )* 
	]
	[
		<NOWAIT>
		| <WAIT> NumericLiteral()
		| <K_SKIP> <LOCKED>
	]

}

//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#i2126435
void SqlSubquery()    :
{ Token start = getToken(1) ; }
{
 {System.err.println("SqlSubquery: attempting SqlSubQuery() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

//SRT(
	/*
	SqlQueryBlock()
	| 
	  ( 
		// Left recursion SqlSubquery() //@TODO
		SqlQueryBlock()
		(
			<UNION> [ <ALL> ]
			| <INTERSECT>
			| <MINUS>
		SqlSubquery()
		)*
	  )


        Refactor to eliminate Left Recursion 
	SqlQueryBlock()
	| 
	  ( 
		<LPAREN> 
		// Left recursion SqlSubquery() //@TODO
		(
 			<LPAREN> SqlQueryBlock() <RPAREN>
 			| SqlQueryBlock()
		)
		(
			<UNION> [ <ALL> ]
			| <INTERSECT>
			| <MINUS>
		(
		  <LPAREN> SqlSubquery() <RPAREN>
		  | SqlSubquery()
		)
		)*
		<RPAREN> 
	  )
	  |
	  ( 
		// Left recursion SqlSubquery() //@TODO
		(
 			<LPAREN> SqlQueryBlock() <RPAREN>
 			| SqlQueryBlock()
		)
		(
			<UNION> [ <ALL> ]
			| <INTERSECT>
			| <MINUS>
		(
		  <LPAREN> SqlSubquery() <RPAREN>
		  | SqlSubquery()
		)
		)*
	  )


        SqlSubqueryClause()
	(
	  <UNION> [ <ALL> ]
	  | <INTERSECT>
	  | <MINUS>
	)
        SqlSubqueryClause()

	Where SubqueryClause() is
	QueryBlock()
	| <LPAREN> Subquery() <RPAREN>
        */


	{ start = getToken(1) ; }
        SqlSubqueryClause()
	{System.err.println("SqlSubquery: after first SqlSubqueryClause() from line "
            +start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" to "
            +token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "
                           ); }

	(
	{System.err.println("SqlSubquery: before SET SqlSubqueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	  (
	    ( <UNION> [ <ALL> ] )
	    | <INTERSECT>
	    | <MINUS>
	  )
	  SqlSubqueryClause()
	{System.err.println("SqlSubquery: after SET SqlSubqueryClause() from line "
                             +start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" to "
                             +token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "
                           ); }
	)*

	//SRT @TODO {System.err.println("SqlSubquery: attempting optional SqlOrderByClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

	[ SqlOrderByClause() ]
	//SRT @TODO LOOKAHEAD( {getToken(1).image.equalsIgnoreCase("ORDER")} ) ( SqlOrderByClause() )
	//LOOKAHEAD( <OFFSET> | <FETCH> ) ( SqlRowLimitingClause() )

	// SqlRowLimitingClause() 
	//{System.err.println("SqlSubquery: attempting optional <OFFSET> clause  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	//LOOKAHEAD ( {getToken(1).image.equalsIgnoreCase("OFFSET")} ) ( <OFFSET> NumericLiteral() ( <ROW> | <ROWS> )  )
	[ <OFFSET> NumericLiteral() ( <ROW> | <ROWS> )  ]

	//SRT @TODO {System.err.println("SqlSubquery: attempting optional <FETCH> clause  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	//LOOKAHEAD ( {getToken(1).image.equalsIgnoreCase("FETCH")} ) 
	[ 
	  <FETCH> ( <FIRST> | <NEXT> ) 
	  [ NumericLiteral() [ <PERCENT> ] ]

	  [ <ROW> | <ROWS> ] 
	  [ <ONLY> | <WITH> <TIES> ]
	]
 {System.err.println("SqlSubquery: completed SqlSubQuery() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	

}


void SqlSubqueryClause()    :
{
 Token start = getToken(1) ; 
 System.err.println("SqlSubqueryClause: attempting SqlSubQueryClause() starting at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " ); 
}
{

        ( <LPAREN> SqlSubquery() <RPAREN> )
	| 
	SqlQueryBlock()
 {System.err.println("SqlSubqueryClause: completed SqlSubQueryClause() starting at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}

void SqlQueryBlock()    :
{
 Token start = getToken(1) ; 
 System.err.println("SqlQueryBlock: attempting SqlSubQueryClause() starting at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " ); 
}
{
	(
	  SqlWithClause()

	  (
	    ( 
	       {System.err.println("SqlQueryBlock: attempting Bracketed SqlSubquery() after WITH clause starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
               <LPAREN> SqlSubquery() <RPAREN> 
	       {System.err.println("SqlQueryBlock: completed Bracketed SqlSubquery() after WITH clause starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
            )
	    |
	    (
	       {System.err.println("SqlQueryBlock: attempting SelectClause() after WITH clause starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
              SqlSelectClause() 
	       {System.err.println("SqlQueryBlock: completed SelectClause() after WITH clause starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
            )
	  )
	 {System.err.println("SqlQueryBlock: completed SqlQueryBlock() WITH Query starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	)
	|
	(
	  {System.err.println("SqlQueryBlock: attempting SqlQueryBlock().SqlSelectClause() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	  SqlSelectClause()
	 {System.err.println("SqlQueryBlock: completed SqlQueryBlock().SqlSelectClause() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	)

}


void SqlSelectClause()    :
{Token start = getToken(1) ; }
{
  {System.err.println("SqlSelectClause: attempting <SELECT> ... at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<SELECT>
	[
		(
			(<DISTINCT>|<UNIQUE>) //Synonyms 
			| <ALL>
		)
	]
	(
		SqlSelectList()
		[ [ <BULK> <COLLECT> ] <INTO> SqlTargetList() ]
	)
  {System.err.println("SqlSelectClause: attempting <FROM>  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<FROM>
  {System.err.println("SqlSelectClause: found <FROM>  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	SqlTableClause() ( ","  SqlTableClause() )*
  {System.err.println("SqlSelectClause: after SqlTableClause()  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ SqlWhereClause()  ]
  {System.err.println("SqlSelectClause: after SqlWhereClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ SqlHierarchicalQueryClause() ]
  {System.err.println("SqlSelectClause: after SqlHierachicalQueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ SqlGroupByClause() ]
  {System.err.println("SqlSelectClause: after SqlGroupByClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ <HAVING> SqlCondition() ]
  {System.err.println("SqlSelectClause: after SqlHavingClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ SqlModelClause() ]
  {System.err.println("SqlSelectClause: after SqlModelClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

  {System.err.println("SqlSelectClause: completed SqlSelectClause() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}



void SqlTableClause()    :
{
  Token start = getToken(1) ;
  Token alias = null;
}
{
{System.err.println("SqlTableClause: attempting SqlTableClause() at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" "); }
	/*
	<LPAREN> SqlJoinClause() <RPAREN>
	|  SqlTableReference()
	| SqlJoinClause()
        
	Refactored out leading  SqlTableReference() to remove grammar ambiguity
	*/
	
	(
	<LPAREN> SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/ /*[ SqlJoinClause() ] */ <RPAREN>
		{ 
		 System.err.println("SqlTableClause: paranthesised SqlTableReference starting at line "+start.beginLine+", column "+start.beginColumn+" and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); 
		  alias = SqlTableAlias() ; 
		}
         [ SqlJoinClause() ]
	)
	|  
	(
	   SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/ [ SqlJoinClause() ]
	)

{System.err.println("SqlTableClause: completed SqlTableClause() starting at line " +start.beginLine+", column "+start.beginColumn+" -  \""+start.image+"\" and finishing at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}

void SqlWithClause()    :
{
	Token start = getToken(1) ;
}
{
{System.err.println("SqlWithClause: attempting SqlWithClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

        start = <WITH> 
	//@TODO PLSQL Declarations - 12c
	(
	  SqlPLSQLDeclarations(start) ( SqlPLSQLDeclarations(start) )*
	  | SqlSubqueryFactoringClause()
	)+

  {System.err.println("SqlWithClause: completed SqlWithClause() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlPLSQLDeclarations(Token queryStart)    :
{ Token start = getToken(1) ; }
{
	try
	{
	  ProgramUnit(false, queryStart)  
	/*
	  MethodDeclarator(false, 1, queryStart)  
	  (
		DeclarativeSection(false,null)
		 <BEGIN> (Statement())* (ExceptionHandler())?  <END> [ID()] 
	  ) 
	*/
	}
	catch (SAXException ex)
	{ 
	  System.err.println("SqlPLSQLDeclaration: completed SqlPLSQLDeclaration() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); 
	} 

}


void SqlSubqueryFactoringClause()    :
{}
{
{System.err.println("SqlSubqueryFactoringClause: attempting SqlQueryRefactoringClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	SqlSubqueryFactoringSubclause()    [ ","  SqlSubqueryFactoringSubclause()  ] 
{System.err.println("SqlSubqueryFactoringClause: completed SqlQueryRefactoringClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlSubqueryFactoringSubclause()    :
{}
{
{System.err.println("SqlSubqueryFactoringSubclause: attempting SqlQueryRefactoringSubclause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
      UnqualifiedID() //Query name) 
	[
	  <LPAREN>
		  //Column Alias List 
		  UnqualifiedID() ( "," UnqualifiedID() )* 
	  <RPAREN>
	]
	<AS>
	<LPAREN>
		SqlSubquery()
	<RPAREN>
	[ SqlSearchClause() ]
	[ SqlCycleClause() ]
	
	
{System.err.println("SqlSubqueryFactoringSubclause: completed SqlQueryRefactoringSubclause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlSearchClause()    :
{}
{
	<SEARCH> 
	( <DEPTH>|<BREADTH> ) 
	<FIRST> <BY> SqlColumnOrderingClause() ( "," SqlColumnOrderingClause() )*
	<SET> Name() //Ordering Column 

}


void SqlCycleClause()    :
{}
{
	<CYCLE> 
	UnqualifiedID() ( "," UnqualifiedID() )* 
	<SET> UnqualifiedID() //Cycle Mark Column Alias
	<TO> SqlExpression() <_DEFAULT> SqlExpression()
	

}



void SqlTargetList()    :
{}
{
{System.err.println("SqlTargetList: attempting SqlTargetList()"); }
	({System.err.println("SqlTargetList: attempting first SqlExpression"); }
          SqlExpression() 
	)
	(
	  ({System.err.println("SqlTargetList: attempting repeating SqlExpression"); }
	    "," SqlExpression() 
	  )
	)*

}


void SqlSelectList()    :
{Token start = getToken(1); 
}
{
{System.err.println("SqlSelectList: attempting SqlSelectList()"); }
	({System.err.println("SqlSelectList: attempting first SqlItem"); }
	  <MULT> /* SQL WIldcard */
           | SqlSelectItem() 
	)
	(
	  ({System.err.println("SqlSelectList: attempting repeating SqlItem"); }
	    "," SqlSelectItem() 
	  )
	)*

 {System.err.println("SqlSelectList: completed SqlSelectList() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlSelectItem()  :
{
Token start = getToken(1) ;
Token alias = null ;
}
{
{System.err.println("SqlSelectItem: attempting SqlSelectItem()"); }
/*
  ( {System.err.println("SqlSelectItem: attempting SqlSelectItem(QualifiedID())"); } 
    QualifiedName()  "." <MULT> /* SQL Wildcard * / 
  )
  |  
  SqlAggregateFunction() 
  |
  SqlAnalyticeFunction() 
  |
*/
  ({System.err.println("SqlSelectItem: attempting SqlSelectItem(SqlExpression())"); }  
    SqlExpression() 
    [ 
	[ <AS> ]  UnqualifiedID() 
	{ 
	 // System.err.println("SqlSelectItem: starting at line "+start.beginLine+", column "+start.beginColumn+" and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); 
          alias = SqlColumnAlias() ; 
        }

    ] //ColumnAlias )
  )
 {System.err.println("SqlSelectItem: completed SqlSelectItem() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}



void SqlTableReference()    :
{
  Token start = getToken(1) ;
  Token alias = null;
  String string = null ;
}
{
 {System.err.println("SqlTableReference: attempting SqlTableReference() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

	(
		SqlContainersClause()
		| 
		(
			(
				<ONLY> <LPAREN> SqlQueryTableExpression() <RPAREN>
				|
				SqlQueryTableExpression()
				|  ( SqlSubquery() //@TODO Found   
 {System.err.println("SqlTableReference: Subquery() [EXTRA] after  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
                                   )
			)
			[ SqlFlashbackQueryClause() ]
			[
				SqlPivotClause()
				| SqlUnpivotClause()
				| SqlRowPatternClause()
			]
		)
	)
	
 {System.err.println("SqlTableReference: potential Table Alias at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
/*
	LOOKAHEAD( { !( <RPAREN>.equalsIgnoreCase(getToken(1).image) || "INNER".equalsIgnoreCase(getToken(1).image) || "OUTER".equalsIgnoreCase(getToken(1).image) || "JOIN".equalsIgnoreCase(getToken(1).image) || "FULL".equalsIgnoreCase(getToken(1).image) || "CROSS".equalsIgnoreCase(getToken(1).image) || "NATURAL".equalsIgnoreCase(getToken(1).image) || "WHERE".equalsIgnoreCase(getToken(1).image) || "START".equalsIgnoreCase(getToken(1).image) || "CONNECT".equalsIgnoreCase(getToken(1).image) || "GROUP".equalsIgnoreCase(getToken(1).image) || "ORDER".equalsIgnoreCase(getToken(1).image) || "UNION".equalsIgnoreCase(getToken(1).image) || "MINUS".equalsIgnoreCase(getToken(1).image) || "INTERSECT".equalsIgnoreCase(getToken(1).image) ) } ) 
   (
	UnqualifiedID() 
       {System.err.println("SqlTableReference: found Table Alias() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
   ) //Table Alias
*/
	//LOOKAHEAD( { isValidAlias(getToken(1).image) } ) UnqualifiedID() 
	//[ UnqualifiedID() ] //Table Alias
	{ 
	 System.err.println("SqlTableReference: starting at line "+start.beginLine+", column "+start.beginColumn+" and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); 
          alias = SqlTableAlias() ; 
        }

 {System.err.println("SqlTableReference: completed SqlTableReference() starting at line "+start.beginLine+", column "+start.beginColumn +" - \""+start.image+"\" " +" and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}

JAVACODE
Token SqlTableAlias ()
{
  Token alias = null;
	if (isValidAlias(getToken(1).image))
	{
		alias = getNextToken() ;
	}
  return alias; 
}

JAVACODE
Token SqlColumnAlias ()
{
  Token alias = null;
	if (isValidColumnAlias(getToken(1).image))
	{
		alias = getNextToken() ;
	}
  return alias; 
}


void SqlFlashbackQueryClause()    :
{}
{
 {System.err.println("SqlFlashbackQueryClause: attempting SqlFlashbackQueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	(
		<VERSIONS>
		(
			( <BETWEEN> ( <SCN> | <TIMESTAMP> )   )
			|
			( <PERIOD> <FOR> QualifiedID() <BETWEEN>  )
		)
		(
			( <MINVALUE> | SqlExpression() )
			<AND>
			( <MAXVALUE> | SqlExpression() )
		)
	)
	|
	(
		<AS> <OF> 
		(
			( <SCN> | <TIMESTAMP> ) 
			SqlExpression() 
		)
		|
		(
			( <PERIOD> <FOR> QualifiedID() SqlExpression()  )
		)
	
	)

 {System.err.println("SqlFlashbackQueryClause: completed SqlFlashbackQueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlQueryTableExpression()    :
{Token start = getToken(1) ;
 Token thisToken;  
 String string = null; 
 StringBuffer sb = new StringBuffer() ;
 String objectReference = null; 
}
{

 {System.err.println("SqlQueryTableExpression: attempting SqlQueryTableExpression() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	( [ <LATERAL> ] <LPAREN> SqlSubqueryClause() 
                                                 ( 
						 LOOKAHEAD(4)
							 ( 
							   <RPAREN> 
							   (
							      ( <UNION> [ <ALL> ] )
							      | <INTERSECT>
							      | <MINUS>
							   )
							    <LPAREN> SqlSubquery() 
							 )
                                                 )*
			       [ SqlSubqueryRestrictionClause() ] 
                        <RPAREN>  
 {System.err.println("SqlQueryTableExpression: found LATERAL ... at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	 //| ( SqlSubquery() [ SqlSubqueryRestrictionClause() ] 
	 //{System.err.println("SqlQueryTableExpression: (Extra) at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
         //  )
        )
	|  xmlTable()
 {System.err.println("xmlTable: found xmlTable() .. at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	|  SqlTableCollectionExpression()
 {System.err.println("SqlQueryTableExpression: found SqlTableExpression() .. at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	|  ( string = QualifiedName() { sb.append(string); }
		[ 
			( "@" string = QualifiedName() /* DBLink Name */  { sb.append("@"); sb.append(string); }) 
			| 
			SqlPartitionExtensionClause() 
		] 
		[ SqlSampleClause() ]
             { objectReference = sb.toString(); }
 {System.err.println("SqlQueryTableExpression: found OBJECT REFERENCE " + objectReference + " at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	   )
	//|  UnqualifiedID() //Query Name 

 {System.err.println("SqlQueryTableExpression: completed SqlQueryTableExpression() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlPivotClause()    :
{}
{
 {System.err.println("SqlPivotClause: attempting SqlPivotClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<PIVOT> [ <XML> ]

	<LPAREN>
		(
			SqlAggregateFunction() <LPAREN> SqlExpression() "}" 
			[ <AS> ]
			 UnqualifiedID() //Alias 
		)
		( 
			"," 
			(
				SqlAggregateFunction() <LPAREN> SqlExpression() "}" 
				[ <AS> ]
				 UnqualifiedID() //Alias 
			)
		)
		SqlPivotForClause()
		SqlPivotInClause()
	<RPAREN>

 {System.err.println("SqlPivotClause: completed SqlPivotClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlReferencedColumns()    :
{}
{
		QualifiedID() //Column Name 
		|
		//Column List 
		(
			<LPAREN>
				QualifiedID() ( "," QualifiedID() )*
			<RPAREN>
		)

}


void SqlPivotForClause()    :
{}
{
	<FOR> SqlReferencedColumns() 
	

}


void SqlPivotInClause()    :
{}
{
	<IN> <LPAREN>
		(

			<ANY> ( "," <ANY> )*
			| SqlSubquery()
			| SqlColumnExpression() ( ","  SqlColumnExpression() )
		)
		
	<RPAREN>

}


void SqlUnpivotClause()    :
{}
{
	<UNPIVOT> 
	[ [ <INCLUDE> | <EXCLUDE> ] <NULLS> ]
	<LPAREN>
		SqlReferencedColumns() 
		SqlPivotForClause() 
		SqlUnpivotInClause()
	<RPAREN>

}


void SqlUnpivotInClause()    :
{}
{
	<IN> <LPAREN>
		SqlReferencedColumns()
		<AS>
		(
			Literal()
			|
			<LPAREN> Literal() ( "," Literal() )* <RPAREN> 
		)
		
	<RPAREN>

}



void SqlSampleClause()    :
{}
{
 {System.err.println("SqlSampleClause: attempting SqlSampleClause()  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<SAMPLE> [ <BLOCK> ]
	<LPAREN>
		NumericLiteral() //Sample Percentage 
                /*@TODO
			Disagreement between syntax 
                        SAMPLE [ BLOCK] ( number ) [ SEED (number) ] http://docs.oracle.com/database/121/SQLRF/statements_10002.htm#SQLRF01702 
                        SAMPLE BLOCK ( number, number ) https://blogs.oracle.com/datamining/entry/to_sample_or_not_to_sample_part_2 
		*/
		[
		  "," NumericLiteral() 
		]
	<RPAREN>
	[
		<SEED>
		<LPAREN>
			Literal() //Seed Value NumericLiteral() ?
		<RPAREN>
	]

 {System.err.println("SqlSampleClause: found SqlSampleClause()  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlPartitionExtensionClause()    :
{}
{

	( <PARTITION> | <SUBPARTITION> )
	(
		<LPAREN> QualifiedID() ( "," QualifiedID() )*  <RPAREN> 
		|
		<FOR> <LPAREN>  QualifiedID() ( "," QualifiedID() )* <RPAREN> 
	)


}


void SqlSubqueryRestrictionClause()    :
{}
{

	<WITH>
	[ 
		( <READ> <ONLY> )
		|
		( <CHECK> <OPTION> )
	] 
	[
		<CONSTRAINT> UnqualifiedID() //Constraint Name 
	]


}


void SqlTableCollectionExpression()    :
{}
{

	(<TABLE>|<THE>) <LPAREN> SqlCollectionExpression() <RPAREN> [ <LPAREN> "+" <RPAREN> ]
	//Possibly @TODO <CAST> <LPAREN> <MULTISET> <LPAREN> SqlCollectionExpression() <RPAREN> <RPAREN> 

}



//http://docs.oracle.com/database/121/PLSQLRF/Statements_8005.htm#i2112830
//The collection_expression can be a subquery, a column, a function, or a collection constructor. Regardless of its form, it must return a collection value¿that is, a value whose type is nested table or varray. This process of extracting the elements of a collection is called collection unnesting.
void SqlCollectionExpression()    :
{}
{
	SqlSubquery()
	| SqlExpression() // Column, Function, Collection Constructor 

}

void SqlContainersClause()    :
{
Token thisToken;  
String string = null; 
StringBuffer sb = new StringBuffer() ;
String objectReference = null; 
}
{

	<CONTAINERS>
	<LPAREN> 
		//QualifiedID() { sb.append(token.image); } ( "," QualifiedID() { sb.append("sb.append(token.image); })*
                objectReference = QualifiedName()
	<RPAREN>

 {System.err.println("SqlContainersClause: completed SqlContainersClause() with OBJECT REFERENCE " + objectReference + " at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#CHDIJFDJ
void SqlJoinClause()    :
{}
{
 {System.err.println("SqlJoinClause: attempting SqlJoinClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	// Move up to remove ambiguity SqlTableReference()
	(
 {System.err.println("SqlJoinClause: attempting CROSS NATURAL INNER JOIN ...() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
		//@TODO remove SqlJoinedTableReferences()
		//INNER CROSS JOIN CLAUSE 
		(
			(
				[ <INNER> ] <JOIN> SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/
				(
					( <ON> SqlCondition() )
                                        |
					( <USING> 
						//Column List 
						<LPAREN> 
							QualifiedID() ( "," QualifiedID() )*
						<RPAREN>
					)
				)
			)
			|
			(
				(
					( <CROSS> )
					|
					( <NATURAL> [ <INNER> ] )
				)
				<JOIN> SqlTableReference() 
				//LOOKAHEAD( { !<RPAREN>.equalsIgnoreCase(getToken(1).image) && !"WHERE".equalsIgnoreCase(getToken(1).image) && !"START".equalsIgnoreCase(getToken(1).image) && !"CONNECT".equalsIgnoreCase(getToken(1).image) && !"GROUP".equalsIgnoreCase(getToken(1).image) && !"ORDER".equalsIgnoreCase(getToken(1).image) && !"UNION".equalsIgnoreCase(getToken(1).image) && !"MINUS".equalsIgnoreCase(getToken(1).image) && !"INTERSECT".equalsIgnoreCase(getToken(1).image) } ) ( UnqualifiedID() ) /*Table Alias*/
				//[ UnqualifiedID() ]
{System.err.println("Completed CROSS/NATURAL JOIN : "); }
			)
		)

		//OUTER JOIN CLAUSE 
		|
		(
			[ SqlQueryPartitionClause() ]
			[ <NATURAL> ]
			SqlOuterJoinType() 
			<JOIN> SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/
			[ SqlQueryPartitionClause() ]
			[
				( <ON> SqlExpression() )
                                |
				( <USING> 
					//Column List 
					<LPAREN> 
						QualifiedID() ( "," QualifiedID() )*
					<RPAREN>
				)
			]
		)

		//CROSS OUTER APPLY CLAUSE 
		|SqlCrossOuterApplyClause()  

	)+ 
	
 {System.err.println("SqlJoinClause: completed SqlJoinClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlQueryPartitionClause()    :
{
Token start = getToken(1); 
}
{
 {System.err.println("SqlQueryPartitionClause: attempting SqlQueryPartitionClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<PARTITION> <BY> 
	(
		( <LPAREN> SqlExpression() ( ","  SqlExpression() )*  <RPAREN> )
		| 
		( SqlExpression() ( ","  SqlExpression() )* )
	)
{System.err.println("SqlQueryPartitionClause: completed SqlQueryPartitionClause() starting at line " +start.beginLine+", column "+start.beginColumn+" -  \""+start.image+"\" and finishing at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}

void SqlColumnExpression()    :
{}
{
	(
		( <LPAREN> SqlExpression() ( ","  SqlExpression() )*  <RPAREN> )
		| 
		SqlExpression() 
	)
	[ <AS> UnqualifiedID() ] //Column Alias 

}


void SqlOuterJoinType()    :
{}
{
	( <FULL> | <LEFT> | <RIGHT> )
	<OUTER>

}

void SqlCrossOuterApplyClause()    :
{}
{
	( <CROSS> | <OUTER> )
	<APPLY>
	(
		SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/
		|
		SqlCollectionExpression()
	)
	

}


void SqlWhereClause()    :
{}
{
  {System.err.println("SqlWhereClause: attempting SqlWhereClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	(
	<WHERE>
	SqlCondition()
	)

  {System.err.println("SqlWhereClause: after SqlWhereClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlHierarchicalQueryClause()    :
{}
{
  {System.err.println("SqlHierarchicalQueryClause: attempting SqlHierarchicalQueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	(
		<CONNECT> <BY> [ <NOCYCLE> ] SqlCondition() 
		[ <START> <WITH> SqlCondition() ]
	)
	|
	(
		<START> <WITH> SqlCondition() <CONNECT> <BY> [ <NOCYCLE> ] SqlCondition()
	)
	
  {System.err.println("SqlHierarchicalQueryClause: after SqlHierarchicalQueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlGroupByClause()    :
{}
{
  {System.err.println("SqlGroupByClause: attempting SqlGroupByClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<GROUP> <BY> 
	(
		SqlRollupCubeClause()
		|SqlGroupingSetsClause()
		|SqlExpression()
	)
	( 
		"," 
		(
		SqlRollupCubeClause()
		|SqlGroupingSetsClause()
		|SqlExpression()
		)
	)*

	//[ <HAVING> SqlCondition() ]

  {System.err.println("SqlGroupByClause: after SqlGroupByClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlHavingClause()    :
{}
{
  {System.err.println("SqlHavingClause: attempting SqlHavingClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<HAVING> SqlCondition() 

  {System.err.println("SqlHavingClause: after SqlHavingClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlRollupCubeClause()    :
{}
{
	( <ROLLUP> | <CUBE> )
	<LPAREN>
		SqlGroupingExpressionList()
	<RPAREN>

}


void SqlGroupingSetsClause()    :
{}
{
	<GROUPING> <SETS> 
	<LPAREN>
	(
		SqlRollupCubeClause()
		|SqlGroupingExpressionList()
	)
	( 
		"," 
		(
		SqlRollupCubeClause()
		|SqlGroupingExpressionList()
		)
	)*
	<RPAREN>

}


void SqlGroupingExpressionList()    :
{}
{
	SqlExpressionList() ( "," SqlExpressionList() )*

}


void SqlExpressionList()    :
{}
{
	(
		<LPAREN> SqlExpression() ( ","  SqlExpression() )*  <RPAREN>
		| SqlExpression() ( ","  SqlExpression() )*  
	)

}


void SqlModelClause()    :
{}
{
  {System.err.println("SqlModelClause: attempting SqlModelClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<MODEL>
	SqlCellReferenceOptions()
	[ SqlReturnRowsClause() ]
	[ ( SqlReferenceModel() )+ ]
	SqlMainModel()

  {System.err.println("SqlModelClause: after SqlModelClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlCellReferenceOptions()    :
{}
{
	[
		 ( <IGNORE> | <KEEP> ) 
		<NAV>
	]
	[
		<UNIQUE>
		 ( <DIMENSION> | <SINGLE> <REFERENCE> ) 
	]

}


void SqlReturnRowsClause()    :
{}
{
	<RETURN>
	( <UPDATED> | <ALL> )
	<ROWS>

}


void SqlReferenceModel()    :
{}
{
	<REFERENCE>
	UnqualifiedID() //Reference Model Name 
	<ON> 
	<LPAREN> SqlSubquery() <RPAREN> 
	SqlModelColumnClauses()
	SqlCellReferenceOptions() 

}


void SqlMainModel()    :
{}
{
	[
	<MODEL>
	UnqualifiedID() //Main Model Name 
	]
	SqlModelColumnClauses()
	SqlCellReferenceOptions()
	SqlModelRulesClause()

}

void SqlModelColumnClauses()    :
{}
{
	<PARTITION> <BY> 
	<LPAREN>
		( SqlExpression() [ QualifiedID() ]  )
		( ","  SqlExpression() [ QualifiedID() ] )*
	<RPAREN>

	<DIMENSION> <BY> 
	<LPAREN>
		( SqlExpression() [ QualifiedID() ]  )
		( ","  SqlExpression() [ QualifiedID() ] )*
	<RPAREN>

	<MEASURES> 
	<LPAREN>
		( SqlExpression() [ QualifiedID() ]  )
		( ","  SqlExpression() [ QualifiedID() ] )*
	<RPAREN>

}

void SqlModelColumn()    :
{}
{
	SqlExpression() [ [ <AS> ] UnqualifiedID() ]

}

void SqlModelRulesClause()    :
{}
{
	<RULES>
	[
		[ <UPDATE> | <UPSERT> [ <ALL> ] ]
		[ ( <AUTOMATIC> | <SEQUENTIAL> ) <ORDER> ]
		SqlModelIterateClause() 
	]	
	<LPAREN>
		(
			[ <UPDATE> | <UPSERT> [ <ALL> ] ]
			SqlCellAssignment()
			[ SqlOrderByClause() ]
			"=" 
			SqlExpression()
		)
		(
			","
			[ <UPDATE> | <UPSERT> [ <ALL> ] ]
			SqlCellAssignment()
			[ SqlOrderByClause() ]
			"=" 
			SqlExpression()
		)*
		
		
	<RPAREN>

}


void SqlModelIterateClause()    :
{}
{
	<ITERATE> <LPAREN> NumericLiteral() <RPAREN> 
	<UNTIL> <LPAREN> SqlCondition() <RPAREN> 

}



void SqlCellAssignment()    :
{}
{

	UnqualifiedID() //Measure Column 
	"["
		SqlMultiColumnForLoop()
		| (
			(
				SqlSingleColumnForLoop()
				//| SqlCondition()
				| SqlExpression()
			)
			(
				","
				SqlSingleColumnForLoop()
				//| SqlCondition()
				| SqlExpression()
			)*
		)
	"]"

}



void SqlCondition()    :
{}
{
  {System.err.println("SqlCondition: attempting SqlCondition() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	ConditionalOrExpression() 
  {System.err.println("SqlCondition: after SqlCondition() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}

void SqlSingleColumnForLoop()    :
{}
{
	<FOR> 
	QualifiedID() //Dimension Column 
	(
		(
			<IN> 
			<LPAREN>
				( Literal() | SqlSubquery() )
				( "," Literal() | SqlSubquery() )*
			<RPAREN>
		)
		|
		(
			[ <LIKE> SqlExpression() /* pattern() */ ] //@TODO what is a valid pattern?  
			<FROM> Literal() 
			<TO> Literal()
			( <INCREMENT> | <DECREMENT> ) Literal()
		)
	)

}


void SqlMultiColumnForLoop()    :
{}
{
	<FOR> 
	<LPAREN> QualifiedID() //Dimension Column 
	  "," QualifiedID() //Dimension Column 
	<RPAREN>
	(
		(
			<IN> 
			<LPAREN>
				( <LPAREN> Literal() ( ","  Literal() )* <RPAREN> | SqlSubquery() )
				( "," <LPAREN> Literal() ( ","  Literal() )* <RPAREN> | SqlSubquery() )*
			<RPAREN>
		)
	)

}



void SqlOrderByClause()    :
{}
{
	<ORDER> [ <SIBLINGS> ] <BY> 
	SqlColumnOrderingClause() ( "," SqlColumnOrderingClause() )*
	
	[ <ASC> | <DESC> ]

}

void SqlColumnOrderingClause()    :
{}
{
	Expression() // Column Alias 	
	[ <ASC> | <DESC> ]
	[ <NULLS>  [ <FIRST> | <LAST> ] ]

}


void SqlRowLimitingClause()    :
{}
{

	[ <OFFSET> NumericLiteral() ( <ROW> | <ROWS> )  ]

	[ 
		<FETCH> ( <FIRST> | <NEXT> ) 
		[ NumericLiteral() [ <PERCENT> ] ]

		[ <ROW> | <ROWS> ] 
		[ <ONLY> | <WITH> <TIES> ]
	]

}




//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#BABDACDD
void SqlRowPatternClause()    :
{}
{

	<MATCH> <RECOGNIZE>
	<LPAREN>
		[ SqlRowPatternPartitionBy() ]
		[ SqlRowPatternOrderBy() ]
		[ SqlRowPatternMeasures() ]
		[ SqlRowPatternRowsPerMatch() ]
		[ SqlRowPatternSkipTo() ]
		<PATTERN>
		<LPAREN>
			SqlRowPattern()
		<RPAREN>
		[ SqlRowPatternSubsetClause() ] 
		<DEFINE>
		SqlRowPatternDefinitionList()
	<RPAREN>


}


void SqlRowPatternPartitionBy()    :
{}
{
	<PATTERN> <BY> 
	QualifiedID() //Column 
	"," QualifiedID() //Column 

}

void SqlRowPatternOrderBy()    :
{}
{

	<ORDER> <BY> 
	QualifiedID() //Column 
	"," QualifiedID() //Column 

}


void SqlRowPatternMeasures()    :
{}
{
	<MEASURES>
	( SqlExpression() [ <AS> ] UnqualifiedID() )
	( ","  SqlExpression() [ <AS> ] UnqualifiedID() )

}

void SqlRowPatternRowsPerMatch()    :
{}
{

	( ( <ONE> <ROW> ) | ( <ALL> <ROWS> ) )
	<PER> <MATCH>

}

void SqlRowPatternSkipTo()    :
{}
{

	<AFTER> <MATCH> <K_SKIP> 
	(
		(
			(
				( <TO> <NEXT> )
				|
				( <PAST> <LAST> )
			)
			<ROW>
			
		)
	)
	|
	(
		<TO>
		(
			( <FIRST> |  <LAST> )
			Name() //Variable Name 
		)
	)
	

}


void SqlRowPattern()    :
{}
{

	// [ SqlRowPattern() "|" ]  | SqlRowPatternTerm()  
	 SqlRowPatternTerm()  ( "|" SqlRowPatternTerm() )*  

}

void SqlRowPatternTerm()    :
{}
{

	// Left Recusive [ SqlRowPatternTerm() ]  SqlRowPatternFactor()  
	( SqlRowPatternFactor() ) + 

}

void SqlRowPatternFactor()    :
{}
{

	SqlRowPatternPrimary() | SqlRowPatternQuantifier()  

}


void SqlRowPatternPrimary()    :
{}
{

	"$"
	| "^"
	| SqlRowPatternPermute() 
	//| <LPAREN>  SqlRowPattern()  <RPAREN>
	| <LPAREN> 
		(
			( "-" SqlRowPattern() "-" )
			|  SqlRowPattern() 
		)
	  <RPAREN>
	| Name() 

}

void SqlRowPatternPermute()    :
{}
{
	<PERMUTE>
	<LPAREN>
		SqlRowPattern() ( "," SqlRowPattern() )
	<RPAREN>

}

void SqlRowPatternQuantifier()    :
{}
{

	(
		(<MULT> /* SQL Wildcard */ | "+" | "?" )  [ "?" ]
	)
	| ( "{" NumericLiteral()  [ "," [ NumericLiteral() ] ] "}" [ "?" ] )
	//| ( "{" NumericLiteral()  "}" )

}

void SqlRowPatternSubsetClause()    :
{}
{
	<SUBSET>
	SqlRowPatternSubsetItem()
	( "," SqlRowPatternSubsetItem() )*

}


void SqlRowPatternSubsetItem()    :
{}
{

	Name() "=" 
	<LPAREN> 
		Name() ( "," Name() )* 
	<RPAREN>

}


void SqlRowPatternDefinitionList()    :
{}
{
	SqlRowPatternDefinition() 
	
}

void SqlRowPatternDefinition()    :
{}
{
	Name() <AS> SqlCondition() 
	
}

void SqlRowPatternRecFunction()    :
{}
{

	( <CLASSIFIER> <LPAREN> <RPAREN> ) // Row Pattern Classifier Function   
	| ( <MATCH_NUMBER> <LPAREN> <RPAREN> )   // Row Pattern Match Number Function   
	|  SqlRowPatternNavigationFunction()  // Row Pattern Navigation Function   
	|  SqlRowPatternAggregateFunction()  // Row Pattern Aggregate Function   

}


void SqlRowPatternNavigationFunction()    :
{}
{
	//Row Pattern Navigation Logical 
	(
		[  <RUNNING> | <FINAL> ]
		( <FIRST> | <LAST> )
		<LPAREN> SqlExpression() "," NumericLiteral() <RPAREN> 
	)

	|
	(
		( <PREV> | <NEXT> )
		(
			//Row Pattern Navigation Physical 
			(
				<LPAREN> SqlExpression() "," NumericLiteral() <RPAREN> 
			)
			//Row Pattern Navigation Compound 
			|
			(
				( <PREV> | <NEXT> )
				<LPAREN> 
					[  <RUNNING> | <FINAL> ]
					( <FIRST> | <LAST> )
					<LPAREN> SqlExpression() "," NumericLiteral() <RPAREN>

					"," NumericLiteral() 
				<RPAREN> 
			)
		)
	)



}


void SqlRowPatternAggregateFunction()    :
{}
{

	[ <RUNNING> | <FINAL> ]
        ( <AVG> | <COUNT> | <MAX> | <MIN> |  <SUM> ) SqlAggregateFunction()

}



/*
http://docs.oracle.com/database/121/SQLRF/functions003.htm#i89203
Aggregate Functions 


Analytic Function
http://docs.oracle.com/database/121/SQLRF/functions004.htm#i81407
http://docs.oracle.com/cd/E11882_01/server.112/e26088/functions004.htm#SQLRF06174
AnalyticFunction <LPAREN> arguments <RPAREN> 
*/

void SqlAnalyticFunction()    :
{}
{
  {System.err.println("SqlAnalyticFunction: attempting SqlAnalyticFunctio()"); }
	PrimaryExpression() 
	<OVER> <LPAREN> 
			[ SqlQueryPartitionClause() ]
			[ SqlOrderByClause() ]
			[ SqlWindowingClause() ]
		<RPAREN>

}

void SqlWindowingClause()    :
{}
{
  {System.err.println("SqlWindowingClause: attempting SqlWindowingClause()"); }
	(
		<ROWS> | <RANGE> 
	)
	(
		(
		<BETWEEN> 
			(
				( <UNBOUNDED> <PRECEDING> )
				| ( <CURRENT> <ROW> )
				| ( SqlExpression() ( <PRECEDING> | <FOLLOWING> ) ) 
			)
			<AND>
			(
				( <UNBOUNDED> <FOLLOWING> )
				| ( <CURRENT> <ROW> )
				| ( SqlExpression() ( <PRECEDING> | <FOLLOWING> ) ) 
			)
		)
		|
		(
			( <UNBOUNDED> <PRECEDING> )
			| ( <CURRENT> <ROW> )
			| ( SqlExpression() <PRECEDING>  ) 
		)
		
	)

}


void SqlAggregateFunction()    :
{}
{
  {System.err.println("SqlAggregateFunction: attempting SqlAggregateFunction()"); }
	PrimaryExpression() 
	(
	<KEEP>
	<LPAREN>
		<DENSE_RANK> ( <FIRST> | <LAST> ) SqlOrderByClause()
	<RPAREN>
	)

  {System.err.println("SqlAggregateFunction: completed SqlAggregateFunction()"); }
}


//http://docs.oracle.com/database/121/SQLRF/expressions001.htm#i1002626
//http://docs.oracle.com/database/121/SQLRF/expressions.htm#g1057115
void SqlExpression()    :
{
Token start = getToken(1) ;  
}
{
  {System.err.println("SqlExpression: attempting SqlExpression() at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " ); }
	// Need syntactic lookahead to discriminate between SqlColumnAssignment and a procedure call
	(
  	LOOKAHEAD( PrimaryExpression() "=" ) ( 
  {System.err.println("SqlExpression: attempting SqlColumnAssignment()"); }
              SqlColumnAssignment() 
               )   
/*
	| ( <LPAREN>
  {System.err.println("SqlExpression: attempting Paranthesed ConditionalOrExpression()"); }
            (
	      CaseExpression()  
	      |
	      ConditionalOrExpression()  
            )
            <RPAREN>
  {System.err.println("SqlExpression: after Paranthesed ConditionalOrExpression()"); }
          )    
*/
	| (
  {System.err.println("SqlExpression: attempting ConditionalOrExpression()"); }
            (
	      CaseExpression()  
	      |
	      ConditionalOrExpression()  
            )
  {System.err.println("SqlExpression: after ConditionalOrExpression()"); }
          )    
	)
 
  {System.err.println("SqlExpression: after SqlExpression()"); }
  {System.err.println("SqlExpression: completed SqlExpression() starting at at line "+start.beginLine+", column "+start.beginColumn+" - \""+start.image+"\" " + " and ending at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


/*
 * End Sql Parser
 */



/*
 * SQL/XML Functions 
 */

/*
xmlElement ( [ENTITYESCAPING|NOENTITYESCAPING] Expression AS StringLiteral ( , Expression AS StringLiteral )* )
*/
/*
String XMLElement() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	( thisToken = <XMLELEMENT> { sb.append(thisToken.image); } )
	<LPAREN> { sb.append("(");} 

        [ ( <ENTITYESCAPING> | <NOENTITYESCAPING> ) { sb.append(thisToken.image); } ] 

	(
		( [ <NAME> ] ID() ) 
		|
		( [ <EVALNAME> ] Expression() ) 
	)

	[ "," string = XmlAttributes() { sb.append(", "); sb.append(string); }  ]

        (
	  ","
	  ( string = Expression() { sb.append(" "); sb.append(string); }  )
	  <AS> { sb.append(" AS ");} 
	  ( thisToken = <QUOTED_LITERAL> { sb.append(" "); sb.append(thisToken.image); }  )
        )*

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlElement: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}
*/

/*
String xmlAttributes() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLATTRIBUTES> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

        [ ( <ENTITYESCAPING> | <NOENTITYESCAPING> ) { sb.append(thisToken.image); } ] 

        [ ( <SCHEMACHECK> | <NOSCHEMACHECK> ) { sb.append(thisToken.image); } ] 

	( string = Expression() { sb.append(" "); sb.append(string); }  )
	<AS> { sb.append(" AS ");} 
	( thisToken = <QUOTED_LITERAL> { sb.append(" "); sb.append(thisToken.image); }  )

        (
	  ","
	  ( string = Expression() { sb.append(" "); sb.append(string); }  )
	  <AS> { sb.append(" AS ");} 
	  ( thisToken = <QUOTED_LITERAL> { sb.append(" "); sb.append(thisToken.image); }  )
        )*

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlAttributes: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}
*/


/*
String xmlParse() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLPARSE> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

        [ ( <DOCUMENT> | <CONTENT> ) { sb.append(thisToken.image); } ] 

	( string = Expression() { sb.append(" "); sb.append(string); }  )

        [ ( <WELLFORMED ) { sb.append(thisToken.image); } ] 

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlAttributes: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}
*/


/*
String xmlForest() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLFOREST> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

	( string = Expression() { sb.append(" "); sb.append(string); }  )
	<AS> { sb.append(" AS ");} 
        (
	  ( thisToken = <QUOTED_LITERAL> { sb.append(" "); sb.append(thisToken.image); }  )
          |
	  ( <EVALNAME> string = datatype() { sb.append("EVELNAME "); sb.append(string); }  )
        )

        (
	  ","
	  ( string = Expression() { sb.append(" "); sb.append(string); }  )
	  <AS> { sb.append(" AS ");} 
	  (
	    ( thisToken = <QUOTED_LITERAL> { sb.append(" "); sb.append(thisToken.image); }  )
	    |
	    ( <EVALNAME> string = datatype() { sb.append("EVALNAME "); sb.append(string); }  )
	  )
        )*

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlForest: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}
*/


String xmlSerialize() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLSERIALIZE>  { sb.append(thisToken.image);} )
	<LPAREN> { sb.append("(");} 

        [ ( <DOCUMENT> | <CONTENT> ) { sb.append(token.image); } ] 

	( string = Expression() { sb.append(" "); sb.append(string); }  )

        [  <AS> string = datatype()  { sb.append(" AS "); sb.append(string); } ] 

        [  <ENCODING> string = Literal()  { sb.append(" ENCODING "); sb.append(string); } ] 

        [  <VERSION> string = Literal()  { sb.append(" VERSION "); sb.append(string); } ] 

        [  
	 ( <NO> <INDENT> { sb.append(" NO INDENT "); } )
         |
         ( <INDENT> { sb.append(" INDENT"); } [ <SIZE> "=" thisToken = NumericLiteral()  { sb.append(" SIZE = "); sb.append(thisToken.image); } ] )
        ] 


        [  
	 ( (thisToken = <HIDE> |  thisToken = <SHOW>) <DEFAULTS>  { sb.append(" "); sb.append(thisToken.image);  sb.append(" DEFAULTS"); } )

        ] 

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlSerialize: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}


/*
String xmlAgg() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLAGG> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

	( string = Expression() { sb.append(" "); sb.append(string); }  )

        [ SqlOrderByClause() ]

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlAgg: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}
*/

/*
String xmlPI() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLPI> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

        (
	  ( ( thisToken = <QUOTED_LITERAL> | thisToken = <LITERAL> ) { sb.append(" "); sb.append(thisToken.image); }  )
          |
	  ( <EVALNAME> string = datatype() { sb.append("EVELNAME "); sb.append(string); }  )
        )

        (
	  ","
	  ( string = Expression() { sb.append(" "); sb.append(string); }  )
	  <AS> { sb.append(" AS ");} 
	  (
	    ( ( thisToken = <QUOTED_LITERAL> | thisToken = <LITERAL> )  { sb.append(" "); sb.append(thisToken.image); }  )
	    |
	    ( <EVALNAME> string = datatype() { sb.append("EVALNAME "); sb.append(string); }  )
	  )
        )*

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlPI: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}
*/



String xmlTable() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLTABLE> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

	  [
	    string = xmlNamespaces() { sb.append(string);} 
	    "," { sb.append( ",");} 
	  ]

	  // XQuery String 
	  string = StringLiteral() { sb.append(string);} 

	  //XMLTable options
		
	  //XML Passing Clause 
	  [
	    string = xmlPassingClause() { sb.append(string); }  
	/*
	    ( <PASSING> { sb.append(" PASSING "); }  )
	    [ <BY> <VALUE> { sb.append("BY VALUE "); }  ]

	    (
              string = Expression() { sb.append(string); }  

              [ <AS> ( thisToken = <QUOTED_LITERAL> | thisToken = <IDENTIFIER> )  { sb.append(" AS "); sb.append(thisToken.image); }  ]
            )

	    (
	      "," { sb.append(", "); }
	      (
		string = Expression() { sb.append(string); }  

		[ <AS> ( thisToken = <QUOTED_LITERAL> | thisToken = <IDENTIFIER> ) { sb.append(" AS "); sb.append(thisToken.image); }  ]
	      )
            )*
	*/
	  ]


	  //XML COLUMNS XMLTABLE_COLUMN ( , XMLTABLE_COLUMN  )* 

        (
	  <COLUMNS> 
	    { sb.append("COLUMNS "); }

	    string = xmlTableColumn() { sb.append(" "); sb.append(string); }

	    (
	      "," { sb.append(", "); }
	      string = xmlTableColumn() { sb.append(" "); sb.append(string); }
	    )*
  
        )

        (
	  ","
	  ( string = Expression() { sb.append(" "); sb.append(string); }  )
	  <AS> { sb.append(" AS ");} 
	  (
	    ( ( thisToken = <QUOTED_LITERAL> | thisToken = <IDENTIFIER> )  { sb.append(" "); sb.append(thisToken.image); }  )
	    |
	    ( <EVALNAME> string = datatype() { sb.append(" EVALNAME "); sb.append(string); }  )
	  )
        )*

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlTable: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}



String xmlQuery() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLQUERY> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

	  // XQuery String 
	  string = StringLiteral() { sb.append(string);} 

	  //XML Passing Clause 
	  [
	    string = xmlPassingClause() { sb.append(string); }  
	  ]


	  (
	    <RETURNING> <CONTENT> { sb.append(" RETURNING CONTENT"); }
	  )

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlQuery: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}

String xmlExists() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLEXISTS> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

	  // XQuery String 
	  string = StringLiteral() { sb.append(string);} 

	  //XML Passing Clause 
	  [
	    string = xmlPassingClause() { sb.append(string); }  
	  ]

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlExists: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}


String xmlPassingClause() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
    ( <PASSING> { sb.append(" PASSING "); }  )
    [ <BY> <VALUE> { sb.append("BY VALUE "); }  ]

    (
      string = Expression() { sb.append(string); }  

      [ <AS> ( thisToken = <QUOTED_LITERAL> | thisToken = <IDENTIFIER> )  { sb.append(" AS "); sb.append(thisToken.image); }  ]
    )

    (
      "," { sb.append(", "); }
      (
	string = Expression() { sb.append(string); }  

	[ <AS> ( thisToken = <QUOTED_LITERAL> | thisToken = <IDENTIFIER> ) { sb.append(" AS "); sb.append(thisToken.image); }  ]
      )
    )*
  )
 { 
 {System.err.println("xmlPassingClause: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}


String xmlNamespaces() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
	(thisToken = <XMLNAMESPACES> ) { sb.append(thisToken.image);} 
	<LPAREN> { sb.append("(");} 

        [
	  ( <_DEFAULT> string = StringLiteral() { sb.append(" DEFAULT "); sb.append(string); } )
          |
          (
	    string = StringLiteral() { sb.append(" "); sb.append(string); } 
	    <AS> ( thisToken = <IDENTIFIER> | thisToken = <QUOTED_LITERAL> ) { sb.append(" AS "); sb.append(thisToken.image); }  
          )
        ]

        (
	  ","
	  (
	    string = StringLiteral() { sb.append(" "); sb.append(string); }  
	    <AS> ( thisToken = <IDENTIFIER> | token = <QUOTED_LITERAL> ) { sb.append(" AS "); sb.append(thisToken.image); }  
	  )

        )*

        [
	  <_DEFAULT> string = StringLiteral() { sb.append(" DEFAULT "); sb.append(string); } 
        ]

	<RPAREN> { sb.append(")");} 
  )
 { 
 {System.err.println("xmlNamespaces: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}



String xmlTableColumn() :
{ Token thisToken;  String string = null; StringBuffer sb = new StringBuffer() ; }
{
  (
    string = Name() //column name 
    { sb.append(string); }

    (
      string = datatype() { sb.append(" "); sb.append(string); }  
      [
	<PATH> string = Literal() { sb.append(" PATH "); sb.append(string); }  
      ]

      [
	<_DEFAULT> string = Expression() { sb.append(" DEFAULT "); sb.append(string); }  
      ]
    )
    |
    ( <FOR> <ORDINALITY> { sb.append(" FOR ORDINALITY "); }  )
  )
 { 
 {System.err.println("xmlTableColumn: \""+sb.toString() + "\""); }
 return sb.toString(); 
 }
}

