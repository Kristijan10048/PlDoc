
/*
 * Start Sql Parser
 */

//http://docs.oracle.com/cd/B19306_01/server.102/b14200/Statements_4010.htm
//http://docs.oracle.com/database/121/PLSQLRF/Statements_4011.htm#PLSQLRF01110
void CommitStatement()   throws SAXException :
{}
{
	<COMMIT> [<WORK>]
        [
		( <COMMENT> StringLiteral() [ <WRITE> [ <IMMEDIATE> | <BATCH>  ] [ <WAIT> | <NOWAIT>  ] ] )
		|
		( <FORCE>	(
				  <CORRUPT_XID_ALL> 
				| <CORRUPT_XID> StringLiteral() 
				| StringLiteral() [ "," NumericLiteral() ] )
				)
        ]
}

//http://docs.oracle.com/cd/B19306_01/server.102/b14200/Statements_9021.htm#PLSQLRF01610
//http://docs.oracle.com/database/121/PLSQLRF/Statements_9022.htm#PLSQLRF01610
void RollbackStatement()   throws SAXException :
{}
{
	<ROLLBACK> [ <WORK> ]
        [
		( <TO> [ <SAVEPOINT> ] ID() )
		|
		( <FORCE> StringLiteral() [ "," NumericLiteral() ]  )
        ]
}

//http://docs.oracle.com/cd/B19306_01/server.102/b14200/Statements_10001.htm#BABFIJGC
//http://docs.oracle.com/database/121/PLSQLRF/Statements_10001.htm#PLSQLRF01701
void SavepointStatement()   throws SAXException :
{}
{
	 <SAVEPOINT> ID() 
}

//http://docs.oracle.com/cd/B19306_01/server.102/b14200/Statements_9021.htm#PLSQLRF01610
//http://docs.oracle.com/database/121/PLSQLRF/Statements_10005.htm#PLSQLRF01705
void SetTransactionStatement()   throws SAXException :
{}
{
	<SET> <TRANSACTION> 
        [
		(  <READ>  ( <ONLY> | <WRITE> )  )
		|
		( <ISOLATION> <LEVEL> ( <SERIALIZABLE>  | <READ> <COMMITTED>  ) )
		|
		( <USE> <ROLLBACK> <SEGMENT> ID() )
        ]
	<NAME> StringLiteral()
}

//http://docs.oracle.com/cd/B12037_01/appdev.101/b10807/13_elems027.htm
void LockTableStatement()   throws SAXException :
{}
{
	//ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE, SHARE, SHARE ROW EXCLUSIVE, or EXCLUSIVE.
	 <LOCK> <TABLE> QualifiedID()  <IN>  
         (
		<ROW> ( <SHARE> | <EXCLUSIVE> )
		|  <SHARE> [ <UPDATE> | <ROW> <EXCLUSIVE> ]
		| <EXCLUSIVE> 
	 )
	<MODE> [ <NOWAIT> ]  
}

//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#i2065706
void SqlSelectStatement()   throws SAXException :
{}
{
{System.err.println("SqlSelectStatement: attempting SqlSelectStatement()"); }
{System.err.println("SqlSelectStatement: attempting SqlSubquery()"); }
	
	SqlSubquery()
{System.err.println("SqlSelectStatement: completed SqlSubquery()"); }
	[ SqlForUpdateClause() ]

{System.err.println("SqlSelectStatement: completed SqlSelectStatement()"); }
}


//http://docs.oracle.com/cd/B19306_01/appdev.102/b14261/delete_Statement.htm#i33716
//http://docs.oracle.com/database/121/PLSQLRF/Statements_8005.htm#i2112830
void SqlDeleteStatement()   throws SAXException :
{}
{
{System.err.println("SqlDeleteStatement: attempting SqlDeleteStatement()"); }
	<DELETE> [ <FROM> ] 
	(
		<ONLY> "(" SqlDmlTableExpression() ")"
		| SqlDmlTableExpression() 
	) 
	[ UnqualifiedID() ] // alias	
	[
		<WHERE> 
		( <CURRENT> <OF> UnqualifiedID() //Cursor Name 
		| SqlCondition()
		)
	]

	[ SqlReturningClause() ]

	[ SqlErrorLoggingClause() ]

}



void SqlDmlTableExpression()   throws SAXException :
{}
{
{System.err.println("SqlDMlTableExpression: attempting SqlDMlTableExpression()"); }
		<TABLE> "(" SqlSubquery() ")"   
		| QualifiedName() [ "@" QualifiedName() /* DBLink Name */ ]  
		| "(" SqlSubquery() ")"

}

//http://docs.oracle.com/cd/B28359_01/server.111/b28286/Statements_9016.htm
void SqlMergeStatement()   throws SAXException :
{}
{
{System.err.println("SqlMergeStatement: attempting SqlMergeStatement()"); }
	<MERGE> <INTO> QualifiedName() //Table Name
	<USING>
	<ON> "(" SqlCondition() ")"
	// Matched Clause
	<WHEN> <MATCHED> <THEN> 
	<UPDATE> <SET> 
	QualifiedName() 
	"=" 
	(
		<_DEFAULT>
		|
		SqlExpression() 
		
	)
	(
		","
		<_DEFAULT>
		|
		SqlExpression() 
	)*
	//WHERE 
	[ SqlWhereClause() ]

	[ <DELETE> SqlWhereClause() ]
	
	
	<WHEN> <NOT> <MATCHED> <THEN> 
	<INSERT> 
	"("
		//Column Alias List 
		QualifiedID() ( "," QualifiedID() )* 
	")"
	<VALUES> 
	"("
		(
			<_DEFAULT>
			|
			SqlExpression() 
			
		)
		(
			","
			(
			  <_DEFAULT>
			  |
			  SqlExpression() 
			)
		)*
	")"
	[ SqlWhereClause() ]

	[ SqlErrorLoggingClause() ]
 

}



void SqlErrorLoggingClause()   throws SAXException :
{}
{
	<LOG> <ERRORS> 
	[
		<INTO> QualifiedName() 
		"("
			SqlExpression() 
		")"
	]

	[
		<REJECT> <LIMIT> ( <UNLIMITED> | NumericLiteral() )
	]

}

//http://docs.oracle.com/database/121/PLSQLRF/Statements_9014.htm#sthref7054
//http://docs.oracle.com/database/121/PLSQLRF/Statements_9014.htm#i2111652
void SqlInsertStatement()   throws SAXException :
{}
{
{System.err.println("SqlInsertStatement: attempting SqlInsertStatement()"); }

	<INSERT> 
	(
		//Single-Table INSERT 
		(
			//INSERT INTO Clause 
			SqlInsertIntoClause() 
			(
				//Values Clause 
				(
					SqlValuesClause() 
					[ SqlReturningClause() ] 
				)
				| SqlSubquery() 
			)


			[ SqlErrorLoggingClause() ]

			
		)
		//Multi-Table INSERT 
		|
		(
			(
				(
					<ALL> 
					
					(
					  //INSERT INTO Clause 
					  SqlInsertIntoClause() 
					  
					  //Values Clause 
					  SqlValuesClause() 

					  [ SqlErrorLoggingClause() ]
					)+
				)
			)
			| //Multi-table INSERT 
			(
				[ <ALL> | <FIRST> ]
				
				( 
				    <WHEN> SqlCondition() <THEN> 

				    //INSERT INTO Clause 
				    SqlInsertIntoClause() 
				    
				    //Values Clause 
				    SqlValuesClause() 

				    [ SqlErrorLoggingClause() ]
				)+

				<ELSE> 
				(
				  //INSERT INTO Clause 
				  SqlInsertIntoClause() 
				  
				  //Values Clause 
				  SqlValuesClause() 

				  [ SqlErrorLoggingClause() ]
				)+
			)
			SqlSubquery() 
		)
	)

	[ SqlReturningClause() ]

	[ SqlErrorLoggingClause() ]

}




void SqlInsertIntoClause()   throws SAXException :
{}
{
{System.err.println("SqlInsertClause: attempting SqlInsertClause()"); }

	//INTO Table Clause 
	<INTO>
	SqlDmlTableExpression() 

	[ UnqualifiedID() ] //Alias   

	[
		"("
			//Column Alias List 
			UnqualifiedID() ( "," UnqualifiedID() )* 
		")"
	]

}



void SqlValuesClause()   throws SAXException :
{}
{
{System.err.println("SqlValuesClause: attempting SqlValuesClause()"); }
	<VALUES> 
	"("
		(
			<_DEFAULT>
			|
			SqlExpression() 
		)
		(
			","
			(
			  <_DEFAULT>
			  |
			  SqlExpression() 
			)
		)*
	")"
	

}


//http://docs.oracle.com/cd/B19306_01/appdev.102/b14261/update_Statement.htm#i36431
void SqlUpdateStatement()   throws SAXException :
{}
{
{System.err.println("SqlUpdateStatement: attempting SqlUpdateStatement()"); }
	<UPDATE> 
	(
		QualifiedName()  [ "@" QualifiedName() /* DBLink Name */ ]  
		| "(" SqlSubquery() ")"
		| <TABLE> "(" SqlSubquery() ")"   
	) 
        (
	   <SET> 
         |
	   (
  {System.err.println("SqlUpdateStatement: attempting alias keyword"); }
	      UnqualifiedID()  // alias	
  {System.err.println("SqlUpdateStatement: attempting SET keyword"); }
	      <SET> 
  {System.err.println("SqlUpdateStatement: attempting GOT keyword"); }
	   )
        )
	( 
{System.err.println("SqlUpdateStatement: attempting column assignments"); }
          SqlColumnAssignment() ( "," SqlColumnAssignment()  )*
	)
	[
{System.err.println("SqlUpdateStatement: attempting WHERE clause"); }
		<WHERE> 
		( <CURRENT> <OF> UnqualifiedID() //Cursor Name 
		| SqlCondition()
		)
	]

	[ SqlReturningClause() ]

	[ SqlErrorLoggingClause() ]

}


void SqlColumnAssignment()   throws SAXException :
{}
{
{System.err.println("SqlColumnAssignment: attempting SqlColumnAssignment()"); }

	// Multi-column assigment 
	(
		"("
			//Column Alias List 
			QualifiedID() ( "," QualifiedID() )* 
		")"
		"="
		 "(" SqlSubquery() ")" 
	)
	|
	// Single-column assignment 
	(
		QualifiedName() "=" 
		(
			( "(" SqlSubquery() ")" )
			| 
			SqlExpression() 
		)
	)
}


//http://docs.oracle.com/cd/B19306_01/appdev.102/b14261/returninginto_clause.htm#CJAGFGDE
void SqlReturningClause()   throws SAXException :
{}
{
 {System.err.println("SqlReturningClause: attempting SqlReturningClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	( <RETURN> | <RETURNING> ) SqlExpression() ("," SqlExpression())* [<BULK> <COLLECT>] <INTO> SqlExpression() ("," SqlExpression())*

 {System.err.println("SqlReturningClause: Completed SqlReturningClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}

//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#i2126016
void SqlForUpdateClause()   throws SAXException :
{}
{
	
	<FOR> <UPDATE> 
	[ 
		<OF> Name() ( "," Name() )* 
	]
	[
		<NOWAIT>
		| <WAIT> NumericLiteral()
		| <K_SKIP> <LOCKED>
	]

}

//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#i2126435
void SqlSubquery()   throws SAXException :
{}
{
 {System.err.println("SqlSubquery: attempting SqlSubQuery() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

//SRT(
	/*
	SqlQueryBlock()
	| 
	  ( 
		// Left recursion SqlSubquery() //@TODO
		SqlQueryBlock()
		(
			<UNION> [ <ALL> ]
			| <INTERSECT>
			| <MINUS>
		SqlSubquery()
		)*
	  )


        Refactor to eliminate Left Recursion 
	SqlQueryBlock()
	| 
	  ( 
		"(" 
		// Left recursion SqlSubquery() //@TODO
		(
 			"(" SqlQueryBlock() ")"
 			| SqlQueryBlock()
		)
		(
			<UNION> [ <ALL> ]
			| <INTERSECT>
			| <MINUS>
		(
		  "(" SqlSubquery() ")"
		  | SqlSubquery()
		)
		)*
		")" 
	  )
	  |
	  ( 
		// Left recursion SqlSubquery() //@TODO
		(
 			"(" SqlQueryBlock() ")"
 			| SqlQueryBlock()
		)
		(
			<UNION> [ <ALL> ]
			| <INTERSECT>
			| <MINUS>
		(
		  "(" SqlSubquery() ")"
		  | SqlSubquery()
		)
		)*
	  )


        SqlSubqueryClause()
	(
	  <UNION> [ <ALL> ]
	  | <INTERSECT>
	  | <MINUS>
	)
        SqlSubqueryClause()

	Where SubqueryClause() is
	QueryBlock()
	| "(" Subquery() ")"
        */

/*
	  ( 
	     {System.err.println("SqlSubquery: attempting BRACKETED SqlSubQuery() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
            "(" SqlSubquery() ")" 
	     {System.err.println("SqlSubquery: completed BRACKETED SqlSubQuery() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
          )
          |
          LOOKAHEAD( SqlQueryBlock() ( <UNION> [ <ALL> ] | <INTERSECT> | <MINUS>) )
          ( 
		{System.err.println("SqlSubquery: attempting first SqlQueryBlock() of SET query at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
		SqlQueryBlock()
		{System.err.println("SqlSubquery: completed first SqlQueryBlock() SET query at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
		(
		  {System.err.println("SqlSubquery: attempting UNION/MINUS/INTERSECTclause line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
		  (
		    <UNION> [ <ALL> ]
		    | <INTERSECT>
		    | <MINUS>
		  )
		//SqlSubquery()
		SqlSelectClause()
		)+
		  {System.err.println("SqlSubquery: completed UNION/MINUS/INTERSECT clauses line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	  )
          |
          ( 
		{System.err.println("SqlSubquery: attempting lone SqlQueryBlock() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
		SqlQueryBlock()
		{System.err.println("SqlSubquery: completed lone SqlQueryBlock() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	  )
	)
SRT */


        SqlSubqueryClause()

	(
	  (
	    <UNION> [ <ALL> ]
	    | <INTERSECT>
	    | <MINUS>
	  )
	  SqlSubqueryClause()
	)*

	//SRT @TODO {System.err.println("SqlSubquery: attempting optional SqlOrderByClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

	[ SqlOrderByClause() ]
	//SRT @TODO LOOKAHEAD( {getToken(1).image.equalsIgnoreCase("ORDER")} ) ( SqlOrderByClause() )
	//LOOKAHEAD( <OFFSET> | <FETCH> ) ( SqlRowLimitingClause() )

	// SqlRowLimitingClause() 
	//{System.err.println("SqlSubquery: attempting optional <OFFSET> clause  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	//LOOKAHEAD ( {getToken(1).image.equalsIgnoreCase("OFFSET")} ) ( <OFFSET> NumericLiteral() ( <ROW> | <ROWS> )  )
	[ <OFFSET> NumericLiteral() ( <ROW> | <ROWS> )  ]

	//SRT @TODO {System.err.println("SqlSubquery: attempting optional <FETCH> clause  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	//LOOKAHEAD ( {getToken(1).image.equalsIgnoreCase("FETCH")} ) 
	[ 
	  <FETCH> ( <FIRST> | <NEXT> ) 
	  [ NumericLiteral() [ <PERCENT> ] ]

	  [ <ROW> | <ROWS> ] 
	  [ <ONLY> | <WITH> <TIES> ]
	]
 {System.err.println("SqlSubquery: completed SqlSubQuery() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlSubqueryClause()   throws SAXException :
{}
{
{System.err.println("SqlSubqueryClause: "); }

	SqlQueryBlock()
	| "(" SqlSubquery() ")"
{System.err.println("Completed SqlSubqueryClause: "); }
}

void SqlQueryBlock()   throws SAXException :
{}
{
{System.err.println("SqlQueryBlock: attempting WITH "); }
	[
	  SqlWithClause()
	]

	SqlSelectClause()
	/* @TODO to circumvent Left recursion  
	<SELECT>
	[
		((<DISTINCT>|<UNIQUE>)
                 | <ALL>
                )
	]
	SqlSelectList()
	<FROM>
	SqlTableClause() ( ","  SqlTableClause() )*
	SqlWhereClause() 
	SqlHierarchicalQueryClause() 
	SqlGroupByClause() 
	SqlModelClause() 
	*/

{System.err.println("SqlQueryBlock: completed SQLQueryBlock() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlSelectClause()   throws SAXException :
{}
{
  {System.err.println("SqlSelectClause: attempting <SELECT> ... at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<SELECT>
	[
		(
			(<DISTINCT>|<UNIQUE>) //Synonyms 
			| <ALL>
		)
	]
	SqlSelectList()
	[ <INTO> SqlTargetList() ]
  {System.err.println("SqlSelectClause: attempting <FROM>  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<FROM>
  {System.err.println("SqlSelectClause: found <FROM>  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	SqlTableClause() ( ","  SqlTableClause() )*
  {System.err.println("SqlSelectClause: after SqlTableClause()  at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ SqlWhereClause()  ]
  {System.err.println("SqlSelectClause: after SqlWhereClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ SqlHierarchicalQueryClause() ]
  {System.err.println("SqlSelectClause: after SqlHierachicalQueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ SqlGroupByClause() ]
  {System.err.println("SqlSelectClause: after SqlGroupByClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	[ SqlModelClause() ]
  {System.err.println("SqlSelectClause: after SqlModelClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

  {System.err.println("SqlSelectClause: completed SqlSelectClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}



void SqlTableClause()   throws SAXException :
{}
{
{System.err.println("SqlTableClause: attempting SqlTableClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	/*
	"(" SqlJoinClause() ")"
	|  SqlTableReference()
	| SqlJoinClause()
        
	Refactored out leading  SqlTableReference() to remove grammar ambiguity
	*/
	
	"(" SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/ SqlJoinClause() ")"
	|  SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/ [ SqlJoinClause() ]

{System.err.println("SqlTableClause: completed SqlTableClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}

void SqlWithClause()   throws SAXException :
{
	Token queryStart = null ;
}
{
{System.err.println("SqlWithClause: attempting SqlWithClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

      queryStart = <WITH> 
	//@TODO PLSQL Declarations - 12c
	(
	  SqlPLSQLDeclarations(queryStart) ( SqlPLSQLDeclarations(queryStart) )*
	  | SqlSubqueryFactoringClause()
	)+

{System.err.println("SqlWithClause: completed SqlWithClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlPLSQLDeclarations(Token queryStart)   throws SAXException :
{}
{
	  ProgramUnit(false, queryStart)  
	/*
	  MethodDeclarator(false, 1, queryStart)  
	  (
		DeclarativeSection(false,null)
		 <BEGIN> (Statement())* (ExceptionHandler())?  <END> [ID()] 
	  ) 
	*/

}


void SqlSubqueryFactoringClause()   throws SAXException :
{}
{
{System.err.println("SqlSubqueryFactoringClause: attempting SqlQueryRefactoringClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
      UnqualifiedID() //Query name) 
	[
	  "("
		  //Column Alias List 
		  UnqualifiedID() ( "," UnqualifiedID() )* 
	  ")"
	]
	<AS>
	"("
		SqlSubquery()
	")"
	[ SqlSearchClause() ]
	[ SqlCycleClause() ]
	
	
{System.err.println("SqlSubqueryFactoringClause: completed SqlQueryRefactoringClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlSearchClause()   throws SAXException :
{}
{
	<SEARCH> 
	( <DEPTH>|<BREADTH> ) 
	<FIRST> <BY> SqlColumnOrderingClause() ( "," SqlColumnOrderingClause() )*
	<SET> Name() //Ordering Column 

}


void SqlCycleClause()   throws SAXException :
{}
{
	<CYCLE> 
	UnqualifiedID() ( "," UnqualifiedID() )* 
	<SET> UnqualifiedID() //Cycle Mark Column Alias
	<TO> SqlExpression() <_DEFAULT> SqlExpression()
	

}



void SqlTargetList()   throws SAXException :
{}
{
{System.err.println("SqlTargetList: attempting SqlTargetList()"); }
	({System.err.println("SqlTargetList: attempting first SqlExpression"); }
          Name() 
	)
	(
	  ({System.err.println("SqlTargetList: attempting repeating SqlExpression"); }
	    "," Name() 
	  )
	)*

}


void SqlSelectList()   throws SAXException :
{}
{
{System.err.println("SqlSelectList: attempting SqlSelectList()"); }
	({System.err.println("SqlSelectList: attempting first SqlItem"); }
	  "*"
           | SqlSelectItem() 
	)
	(
	  ({System.err.println("SqlSelectList: attempting repeating SqlItem"); }
	    "," SqlSelectItem() 
	  )
	)*

{System.err.println("SqlSelectList: completed SqlSelectList() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlSelectItem() throws SAXException :
{}
{
{System.err.println("SqlSelectItem: attempting SqlSelectItem()"); }
  ({System.err.println("SqlSelectItem: attempting SqlSelectItem(QualifiedID())"); } 
    QualifiedName() [ "." "*" ] 
  )
  |  ({System.err.println("SqlSelectItem: attempting SqlSelectItem(SqlExpression())"); }  
       SqlExpression() [ [ <AS> ] UnqualifiedID() ] //ColumnAlias )
     )
}



void SqlTableReference()   throws SAXException :
{
  Token alias = null;
}
{
 {System.err.println("SqlTableReference: attempting SqlTableReference() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

	(
		SqlContainersClause()
		| 
		(
			(
				<ONLY> "(" SqlQueryTableExpression() ")"
				|
				SqlQueryTableExpression()
			)
			[ SqlFlashbackQueryClause() ]
			[
				SqlPivotClause()
				| SqlUnpivotClause()
				| SqlRowPatternClause()
			]
		)
	)
	
 {System.err.println("SqlTableReference: potential Table Alias at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
/*
	LOOKAHEAD( { !( ")".equalsIgnoreCase(getToken(1).image) || "INNER".equalsIgnoreCase(getToken(1).image) || "OUTER".equalsIgnoreCase(getToken(1).image) || "JOIN".equalsIgnoreCase(getToken(1).image) || "FULL".equalsIgnoreCase(getToken(1).image) || "CROSS".equalsIgnoreCase(getToken(1).image) || "NATURAL".equalsIgnoreCase(getToken(1).image) || "WHERE".equalsIgnoreCase(getToken(1).image) || "START".equalsIgnoreCase(getToken(1).image) || "CONNECT".equalsIgnoreCase(getToken(1).image) || "GROUP".equalsIgnoreCase(getToken(1).image) || "ORDER".equalsIgnoreCase(getToken(1).image) || "UNION".equalsIgnoreCase(getToken(1).image) || "MINUS".equalsIgnoreCase(getToken(1).image) || "INTERSECT".equalsIgnoreCase(getToken(1).image) ) } ) 
   (
	UnqualifiedID() 
       {System.err.println("SqlTableReference: found Table Alias() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
   ) //Table Alias
*/
	//LOOKAHEAD( { isValidAlias(getToken(1).image) } ) UnqualifiedID() 
	//[ UnqualifiedID() ] //Table Alias
	{ alias = SqlTableAlias() ; }

 {System.err.println("SqlTableReference: completed SqlTableReference() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}

JAVACODE
Token SqlTableAlias ()
{
  Token alias = null;
	if (isValidAlias(getToken(1).image))
	{
		alias = getNextToken() ;
	}
  return alias; 
}


void SqlFlashbackQueryClause()   throws SAXException :
{}
{
 {System.err.println("SqlFlashbackQueryClause: attempting SqlFlashbackQueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	(
		<VERSIONS>
		(
			( <BETWEEN> ( <SCN> | <TIMESTAMP> )   )
			|
			( <PERIOD> <FOR> QualifiedID() <BETWEEN>  )
		)
		(
			( <MINVALUE> | SqlExpression() )
			<AND>
			( <MAXVALUE> | SqlExpression() )
		)
	)
	|
	(
		<AS> <OF> 
		(
			( <SCN> | <TIMESTAMP> ) 
			SqlExpression() 
		)
		|
		(
			( <PERIOD> <FOR> QualifiedID() SqlExpression()  )
		)
	
	)

 {System.err.println("SqlFlashbackQueryClause: completed SqlFlashbackQueryClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlQueryTableExpression()   throws SAXException :
{}
{
 {System.err.println("SqlQueryTableExpression: attempting SqlQueryTableExpression() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	( [ <LATERAL> ] "(" SqlSubquery() [ SqlSubqueryRestrictionClause() ] ")"  )
	|  SqlTableCollectionExpression()
	|  ( QualifiedName() 
		[ 
			( "@" QualifiedName() /* DBLink Name */ )
			| 
			SqlPartitionExtensionClause() 
		] 
		[ SqlSampleClause() ]
	   )
	//|  UnqualifiedID() //Query Name 

 {System.err.println("SqlQueryTableExpression: completed SqlQueryTableExpression() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlPivotClause()   throws SAXException :
{}
{
 {System.err.println("SqlPivotClause: attempting SqlPivotClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<PIVOT> [ <XML> ]

	"("
		(
			SqlAggregateFunction() "(" SqlExpression() "}" 
			[ <AS> ]
			 UnqualifiedID() //Alias 
		)
		( 
			"," 
			(
				SqlAggregateFunction() "(" SqlExpression() "}" 
				[ <AS> ]
				 UnqualifiedID() //Alias 
			)
		)
		SqlPivotForClause()
		SqlPivotInClause()
	")"

 {System.err.println("SqlPivotClause: completed SqlPivotClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
}


void SqlReferencedColumns()   throws SAXException :
{}
{
		QualifiedID() //Column Name 
		|
		//Column List 
		(
			"("
				QualifiedID() ( "," QualifiedID() )*
			")"
		)

}


void SqlPivotForClause()   throws SAXException :
{}
{
	<FOR> SqlReferencedColumns() 
	

}


void SqlPivotInClause()   throws SAXException :
{}
{
	<IN> "("
		(

			<ANY> ( "," <ANY> )*
			| SqlSubquery()
			| SqlColumnExpression() ( ","  SqlColumnExpression() )
		)
		
	")"

}


void SqlUnpivotClause()   throws SAXException :
{}
{
	<UNPIVOT> 
	[ [ <INCLUDE> | <EXCLUDE> ] <NULLS> ]
	"("
		SqlReferencedColumns() 
		SqlPivotForClause() 
		SqlUnpivotInClause()
	")"

}


void SqlUnpivotInClause()   throws SAXException :
{}
{
	<IN> "("
		SqlReferencedColumns()
		<AS>
		(
			Literal()
			|
			"(" Literal() ( "," Literal() )* ")" 
		)
		
	")"

}



void SqlSampleClause()   throws SAXException :
{}
{
	<SAMPLE> [ <BLOCK> ]
	"("
		NumericLiteral() //Sample Percentage 
	")"
	[
		<SEED>
		"("
			Literal() //Seed Value NumericLiteral() ?
		")"
	]


}


void SqlPartitionExtensionClause()   throws SAXException :
{}
{

	( <PARTITION> | <SUBPARTITION> )
	(
		"(" QualifiedID() ( "," QualifiedID() )*  ")" 
		|
		<FOR> "("  QualifiedID() ( "," QualifiedID() )* ")" 
	)


}


void SqlSubqueryRestrictionClause()   throws SAXException :
{}
{

	<WITH>
	[ 
		( <READ> <ONLY> )
		|
		( <CHECK> <OPTION> )
	] 
	[
		<CONSTRAINT> UnqualifiedID() //Constraint Name 
	]


}


void SqlTableCollectionExpression()   throws SAXException :
{}
{

	<TABLE> "(" SqlCollectionExpression() ")" [ "(" "+" ")" ]
	//Possibly @TODO <CAST> "(" <MULTISET> "(" SqlCollectionExpression() ")" ")" 

}



//http://docs.oracle.com/database/121/PLSQLRF/Statements_8005.htm#i2112830
//The collection_expression can be a subquery, a column, a function, or a collection constructor. Regardless of its form, it must return a collection value¿that is, a value whose type is nested table or varray. This process of extracting the elements of a collection is called collection unnesting.
void SqlCollectionExpression()   throws SAXException :
{}
{
	SqlSubquery()
	| SqlExpression() // Column, Function, Collection Constructor 

}

void SqlContainersClause()   throws SAXException :
{}
{

	<CONTAINERS>
	"(" 
		QualifiedID() ( "," QualifiedID() )*
	")"

}


//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#CHDIJFDJ
void SqlJoinClause()   throws SAXException :
{}
{
 {System.err.println("SqlJoinClause: attempting SqlJoinClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	// Move up to remove ambiguity SqlTableReference()
	(
 {System.err.println("SqlJoinClause: attempting CROSS NATURAL INNER JOIN ...() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
		//@TODO remove SqlJoinedTableReferences()
		//INNER CROSS JOIN CLAUSE 
		(
			(
				[ <INNER> ] <JOIN> SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/
				(
					( <ON> SqlCondition() )
					( <USING> 
						//Column List 
						"(" 
							QualifiedID() ( "," QualifiedID() )*
						")"
					)
				)
			)
			|
			(
				(
					( <CROSS> )
					|
					( <NATURAL> [ <INNER> ] )
				)
				<JOIN> SqlTableReference() 
				//LOOKAHEAD( { !")".equalsIgnoreCase(getToken(1).image) && !"WHERE".equalsIgnoreCase(getToken(1).image) && !"START".equalsIgnoreCase(getToken(1).image) && !"CONNECT".equalsIgnoreCase(getToken(1).image) && !"GROUP".equalsIgnoreCase(getToken(1).image) && !"ORDER".equalsIgnoreCase(getToken(1).image) && !"UNION".equalsIgnoreCase(getToken(1).image) && !"MINUS".equalsIgnoreCase(getToken(1).image) && !"INTERSECT".equalsIgnoreCase(getToken(1).image) } ) ( UnqualifiedID() ) /*Table Alias*/
				//[ UnqualifiedID() ]
{System.err.println("Completed CROSS/NATURAL JOIN : "); }
			)
		)

		//OUTER JOIN CLAUSE 
		|
		(
			[ SqlQueryPartitionClause() ]
			[ <NATURAL> ]
			SqlOuterJoinType() 
			<JOIN> SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/
			[ SqlQueryPartitionClause() ]
			(
				( <ON> SqlExpression() )
				( <USING> 
					//Column List 
					"(" 
						QualifiedID() ( "," QualifiedID() )*
					")"
				)
			)
		)

		//CROSS OUTER APPLY CLAUSE 
		|SqlCrossOuterApplyClause()  

	)+ 
	
 {System.err.println("SqlJoinClause: completed SqlJoinClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlQueryPartitionClause()   throws SAXException :
{}
{
	<PARTITION> <BY> 
	(
		"(" SqlExpression() ( ","  SqlExpression() )*  ")"
		| 
		SqlExpression() 
	)

}

void SqlColumnExpression()   throws SAXException :
{}
{
	(
		"(" SqlExpression() ( ","  SqlExpression() )*  ")"
		| 
		SqlExpression() 
	)
	[ <AS> UnqualifiedID() ] //Column Alias 

}


void SqlOuterJoinType()   throws SAXException :
{}
{
	( <FULL> | <LEFT> | <RIGHT> )
	<OUTER>

}

void SqlCrossOuterApplyClause()   throws SAXException :
{}
{
	( <CROSS> | <OUTER> )
	<APPLY>
	(
		SqlTableReference() /* [ UnqualifiedID() ] Table Alias*/
		|
		SqlCollectionExpression()
	)
	

}


void SqlWhereClause()   throws SAXException :
{}
{
  {System.err.println("SqlWhereClause: attempting SqlWhereClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	<WHERE>
	SqlCondition()

  {System.err.println("SqlWhereClause: after SqlWhereClause() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}


void SqlHierarchicalQueryClause()   throws SAXException :
{}
{
	(
		<CONNECT> <BY> [ <NOCYCLE> ] SqlCondition() 
		[ <START> <WITH> SqlCondition() ]
	)
	|
	(
		[ <START> <WITH> SqlCondition() <CONNECT> <BY> [ <NOCYCLE> ] ] SqlCondition()
	)
	

}


void SqlGroupByClause()   throws SAXException :
{}
{
	<GROUP> <BY> 
	(
		SqlRollupCubeClause()
		|SqlGroupingSetsClause()
		|SqlExpression()
	)
	( 
		"," 
		(
		SqlRollupCubeClause()
		|SqlGroupingSetsClause()
		|SqlExpression()
		)
	)*

	[ <HAVING> SqlCondition() ]

}


void SqlRollupCubeClause()   throws SAXException :
{}
{
	( <ROLLUP> | <CUBE> )
	"("
		SqlGroupingExpressionList()
	")"

}


void SqlGroupingSetsClause()   throws SAXException :
{}
{
	<GROUPING> <SETS> 
	"("
	(
		SqlRollupCubeClause()
		|SqlGroupingExpressionList()
	)
	( 
		"," 
		(
		SqlRollupCubeClause()
		|SqlGroupingExpressionList()
		)
	)*
	")"

}


void SqlGroupingExpressionList()   throws SAXException :
{}
{
	SqlExpressionList() ( "," SqlExpressionList() )*

}


void SqlExpressionList()   throws SAXException :
{}
{
	(
		"(" SqlExpression() ( ","  SqlExpression() )*  ")"
		| SqlExpression() ( ","  SqlExpression() )*  
	)

}


void SqlModelClause()   throws SAXException :
{}
{
	<MODEL>
	SqlCellReferenceOptions()
	[ SqlReturnRowsClause() ]
	[ ( SqlReferenceModel() )+ ]
	SqlMainModel()

}


void SqlCellReferenceOptions()   throws SAXException :
{}
{
	[
		 ( <IGNORE> | <KEEP> ) 
		<NAV>
	]
	[
		<UNIQUE>
		 ( <DIMENSION> | <SINGLE> <REFERENCE> ) 
	]

}


void SqlReturnRowsClause()   throws SAXException :
{}
{
	<RETURN>
	( <UPDATED> | <ALL> )
	<ROWS>

}


void SqlReferenceModel()   throws SAXException :
{}
{
	<REFERENCE>
	UnqualifiedID() //Reference Model Name 
	<ON> 
	"(" SqlSubquery() ")" 
	SqlModelColumnClauses()
	SqlCellReferenceOptions() 

}


void SqlMainModel()   throws SAXException :
{}
{
	[
	<MODEL>
	UnqualifiedID() //Main Model Name 
	]
	SqlModelColumnClauses()
	SqlCellReferenceOptions()
	SqlModelRulesClause()

}

void SqlModelColumnClauses()   throws SAXException :
{}
{
	<PARTITION> <BY> 
	"("
		( SqlExpression() [ QualifiedID() ]  )
		( ","  SqlExpression() [ QualifiedID() ] )*
	")"

	<DIMENSION> <BY> 
	"("
		( SqlExpression() [ QualifiedID() ]  )
		( ","  SqlExpression() [ QualifiedID() ] )*
	")"

	<MEASURES> 
	"("
		( SqlExpression() [ QualifiedID() ]  )
		( ","  SqlExpression() [ QualifiedID() ] )*
	")"

}

void SqlModelColumn()   throws SAXException :
{}
{
	SqlExpression() [ [ <AS> ] UnqualifiedID() ]

}

void SqlModelRulesClause()   throws SAXException :
{}
{
	<RULES>
	[
		[ <UPDATE> | <UPSERT> [ <ALL> ] ]
		[ ( <AUTOMATIC> | <SEQUENTIAL> ) <ORDER> ]
		SqlModelIterateClause() 
	]	
	"("
		(
			[ <UPDATE> | <UPSERT> [ <ALL> ] ]
			SqlCellAssignment()
			[ SqlOrderByClause() ]
			"=" 
			SqlExpression()
		)
		(
			","
			[ <UPDATE> | <UPSERT> [ <ALL> ] ]
			SqlCellAssignment()
			[ SqlOrderByClause() ]
			"=" 
			SqlExpression()
		)*
		
		
	")"

}


void SqlModelIterateClause()   throws SAXException :
{}
{
	<ITERATE> "(" NumericLiteral() ")" 
	<UNTIL> "(" SqlCondition() ")" 

}



void SqlCellAssignment()   throws SAXException :
{}
{

	UnqualifiedID() //Measure Column 
	"["
		SqlMultiColumnForLoop()
		| (
			(
				SqlSingleColumnForLoop()
				//| SqlCondition()
				| SqlExpression()
			)
			(
				","
				SqlSingleColumnForLoop()
				//| SqlCondition()
				| SqlExpression()
			)*
		)
	"]"

}



void SqlCondition()   throws SAXException :
{}
{
  {System.err.println("SqlCondition: attempting SqlCondition() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }
	ConditionalOrExpression() 
  {System.err.println("SqlCondition: after SqlCondition() at line "+token.beginLine+", column "+token.beginColumn+" - \""+token.image+"\" "); }

}

void SqlSingleColumnForLoop()   throws SAXException :
{}
{
	<FOR> 
	QualifiedID() //Dimension Column 
	(
		(
			<IN> 
			"("
				( Literal() | SqlSubquery() )
				( "," Literal() | SqlSubquery() )*
			")"
		)
		|
		(
			[ <LIKE> SqlExpression() /* pattern() */ ] //@TODO what is a valid pattern?  
			<FROM> Literal() 
			<TO> Literal()
			( <INCREMENT> | <DECREMENT> ) Literal()
		)
	)

}


void SqlMultiColumnForLoop()   throws SAXException :
{}
{
	<FOR> 
	"(" QualifiedID() //Dimension Column 
	  "," QualifiedID() //Dimension Column 
	")"
	(
		(
			<IN> 
			"("
				( "(" Literal() ( ","  Literal() )* ")" | SqlSubquery() )
				( "," "(" Literal() ( ","  Literal() )* ")" | SqlSubquery() )*
			")"
		)
	)

}



void SqlOrderByClause()   throws SAXException :
{}
{
	<ORDER> [ <SIBLINGS> ] <BY> 
	SqlColumnOrderingClause() ( "," SqlColumnOrderingClause() )*
	
	[ <ASC> | <DESC> ]

}

void SqlColumnOrderingClause()   throws SAXException :
{}
{
	Expression() // Column Alias 	
	[ <ASC> | <DESC> ]
	[ <NULLS>  [ <FIRST> | <LAST> ] ]

}


void SqlRowLimitingClause()   throws SAXException :
{}
{

	[ <OFFSET> NumericLiteral() ( <ROW> | <ROWS> )  ]

	[ 
		<FETCH> ( <FIRST> | <NEXT> ) 
		[ NumericLiteral() [ <PERCENT> ] ]

		[ <ROW> | <ROWS> ] 
		[ <ONLY> | <WITH> <TIES> ]
	]

}




//http://docs.oracle.com/database/121/PLSQLRF/Statements_10002.htm#BABDACDD
void SqlRowPatternClause()   throws SAXException :
{}
{

	<MATCH> <RECOGNIZE>
	"("
		[ SqlRowPatternPartitionBy() ]
		[ SqlRowPatternOrderBy() ]
		[ SqlRowPatternMeasures() ]
		[ SqlRowPatternRowsPerMatch() ]
		[ SqlRowPatternSkipTo() ]
		<PATTERN>
		"("
			SqlRowPattern()
		")"
		[ SqlRowPatternSubsetClause() ] 
		<DEFINE>
		SqlRowPatternDefinitionList()
	")"


}


void SqlRowPatternPartitionBy()   throws SAXException :
{}
{
	<PATTERN> <BY> 
	QualifiedID() //Column 
	"," QualifiedID() //Column 

}

void SqlRowPatternOrderBy()   throws SAXException :
{}
{

	<ORDER> <BY> 
	QualifiedID() //Column 
	"," QualifiedID() //Column 

}


void SqlRowPatternMeasures()   throws SAXException :
{}
{
	<MEASURES>
	( SqlExpression() [ <AS> ] UnqualifiedID() )
	( ","  SqlExpression() [ <AS> ] UnqualifiedID() )

}

void SqlRowPatternRowsPerMatch()   throws SAXException :
{}
{

	( ( <ONE> <ROW> ) | ( <ALL> <ROWS> ) )
	<PER> <MATCH>

}

void SqlRowPatternSkipTo()   throws SAXException :
{}
{

	<AFTER> <MATCH> <K_SKIP> 
	(
		(
			(
				( <TO> <NEXT> )
				|
				( <PAST> <LAST> )
			)
			<ROW>
			
		)
	)
	|
	(
		<TO>
		(
			( <FIRST> |  <LAST> )
			Name() //Variable Name 
		)
	)
	

}


void SqlRowPattern()   throws SAXException :
{}
{

	// [ SqlRowPattern() "|" ]  | SqlRowPatternTerm()  
	 SqlRowPatternTerm()  ( "|" SqlRowPatternTerm() )*  

}

void SqlRowPatternTerm()   throws SAXException :
{}
{

	// Left Recusive [ SqlRowPatternTerm() ]  SqlRowPatternFactor()  
	( SqlRowPatternFactor() ) + 

}

void SqlRowPatternFactor()   throws SAXException :
{}
{

	SqlRowPatternPrimary() | SqlRowPatternQuantifier()  

}


void SqlRowPatternPrimary()   throws SAXException :
{}
{

	"$"
	| "^"
	| SqlRowPatternPermute() 
	//| "("  SqlRowPattern()  ")"
	| "(" 
		(
			( "-" SqlRowPattern() "-" )
			|  SqlRowPattern() 
		)
	  ")"
	| Name() 

}

void SqlRowPatternPermute()   throws SAXException :
{}
{
	<PERMUTE>
	"("
		SqlRowPattern() ( "," SqlRowPattern() )
	")"

}

void SqlRowPatternQuantifier()   throws SAXException :
{}
{

	(
		("*" | "+" | "?" )  [ "?" ]
	)
	| ( "{" NumericLiteral()  [ "," [ NumericLiteral() ] ] "}" [ "?" ] )
	//| ( "{" NumericLiteral()  "}" )

}

void SqlRowPatternSubsetClause()   throws SAXException :
{}
{
	<SUBSET>
	SqlRowPatternSubsetItem()
	( "," SqlRowPatternSubsetItem() )*

}


void SqlRowPatternSubsetItem()   throws SAXException :
{}
{

	Name() "=" 
	"(" 
		Name() ( "," Name() )* 
	")"

}


void SqlRowPatternDefinitionList()   throws SAXException :
{}
{
	SqlRowPatternDefinition() 
	
}

void SqlRowPatternDefinition()   throws SAXException :
{}
{
	Name() <AS> SqlCondition() 
	
}

void SqlRowPatternRecFunction()   throws SAXException :
{}
{

	( <CLASSIFIER> "(" ")" ) // Row Pattern Classifier Function   
	| ( <MATCH_NUMBER> "(" ")" )   // Row Pattern Match Number Function   
	|  SqlRowPatternNavigationFunction()  // Row Pattern Navigation Function   
	|  SqlRowPatternAggregateFunction()  // Row Pattern Aggregate Function   

}


void SqlRowPatternNavigationFunction()   throws SAXException :
{}
{
	//Row Pattern Navigation Logical 
	(
		[  <RUNNING> | <FINAL> ]
		( <FIRST> | <LAST> )
		"(" SqlExpression() "," NumericLiteral() ")" 
	)

	|
	(
		( <PREV> | <NEXT> )
		(
			//Row Pattern Navigation Physical 
			(
				"(" SqlExpression() "," NumericLiteral() ")" 
			)
			//Row Pattern Navigation Compound 
			|
			(
				( <PREV> | <NEXT> )
				"(" 
					[  <RUNNING> | <FINAL> ]
					( <FIRST> | <LAST> )
					"(" SqlExpression() "," NumericLiteral() ")"

					"," NumericLiteral() 
				")" 
			)
		)
	)



}


void SqlRowPatternAggregateFunction()   throws SAXException :
{}
{

	[ <RUNNING> | <FINAL> ]
        ( <AVG> | <COUNT> | <MAX> | <MIN> |  <SUM> ) SqlAggregateFunction()

}



/*
http://docs.oracle.com/database/121/SQLRF/functions003.htm#i89203
Aggregate Functions 


Analytic Function
http://docs.oracle.com/database/121/SQLRF/functions004.htm#i81407
http://docs.oracle.com/cd/E11882_01/server.112/e26088/functions004.htm#SQLRF06174
AnalyticFunction "(" arguments ")" 
*/

void SqlAnalyticFunction()   throws SAXException :
{}
{
  {System.err.println("SqlAnalyticFunctio: attempting SqlAnalyticFunctio()"); }
	PrimaryExpression() 
	<OVER> "(" 
			[ SqlQueryPartitionClause() ]
			[ SqlOrderByClause() ]
			[ SqlWindowingClause() ]
		")"

}

void SqlWindowingClause()   throws SAXException :
{}
{
  {System.err.println("SqlWindowingClause: attempting SqlWindowingClause()"); }
	(
		<ROWS> | <RANGE> 
	)
	(
		(
		<BETWEEN> 
			(
				( <UNBOUNDED> <PRECEDING> )
				| ( <CURRENT> <ROW> )
				| ( SqlExpression() ( <PRECEDING> | <FOLLOWING> ) ) 
			)
			<AND>
			(
				( <UNBOUNDED> <FOLLOWING> )
				| ( <CURRENT> <ROW> )
				| ( SqlExpression() ( <PRECEDING> | <FOLLOWING> ) ) 
			)
		)
		|
		(
			( <UNBOUNDED> <PRECEDING> )
			| ( <CURRENT> <ROW> )
			| ( SqlExpression() <PRECEDING>  ) 
		)
		
	)

}


//@TODO
void SqlAggregateFunction()   throws SAXException :
{}
{
  {System.err.println("SqlAggregateFunction: attempting SqlAggregateFunction()"); }
	PrimaryExpression() 

}


//http://docs.oracle.com/database/121/SQLRF/expressions001.htm#i1002626
//http://docs.oracle.com/database/121/SQLRF/expressions.htm#g1057115
void SqlExpression()   throws SAXException :
{ 
}
{
  {System.err.println("SqlExpression: attempting SqlExpression()"); }
	// Need syntactic lookahead to discriminate between SqlColumnAssignment and a procedure call
	(
  	LOOKAHEAD( PrimaryExpression() "=" ) ( 
  {System.err.println("SqlExpression: attempting SqlColumnAssignment()"); }
              SqlColumnAssignment() 
               )   
	| (
  {System.err.println("SqlExpression: attempting ConditionalOrExpression()"); }
            ConditionalOrExpression() 
          )    
	)
 
}


/*
 * End Sql Parser
 */




