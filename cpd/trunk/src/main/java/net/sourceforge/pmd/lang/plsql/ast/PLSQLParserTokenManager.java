/* Generated By:JJTree&JavaCC: Do not edit this line. PLSQLParserTokenManager.java */
/* Copyright (C) 2002 Albert Tumanov

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

*/

package net.sourceforge.pmd.lang.plsql.ast;
import java.io.*;

/** Token Manager. */
public class PLSQLParserTokenManager implements PLSQLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 26;
         return jjMoveNfa_0(3, 0);
      case 12:
         jjmatchedKind = 27;
         return jjMoveNfa_0(3, 0);
      case 32:
         jjmatchedKind = 25;
         return jjMoveNfa_0(3, 0);
      case 33:
         jjmatchedKind = 15;
         return jjMoveNfa_0(3, 0);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1fff8L, 0x0L);
      case 37:
         jjmatchedKind = 11;
         return jjMoveNfa_0(3, 0);
      case 40:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 41:
         jjmatchedKind = 7;
         return jjMoveNfa_0(3, 0);
      case 42:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 18;
         return jjMoveNfa_0(3, 0);
      case 44:
         jjmatchedKind = 6;
         return jjMoveNfa_0(3, 0);
      case 45:
         jjmatchedKind = 19;
         return jjMoveNfa_0(3, 0);
      case 46:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x1100L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 9;
         return jjMoveNfa_0(3, 0);
      case 59:
         jjmatchedKind = 4;
         return jjMoveNfa_0(3, 0);
      case 60:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 64:
         jjmatchedKind = 2;
         return jjMoveNfa_0(3, 0);
      case 65:
      case 97:
         jjmatchedKind = 289;
         return jjMoveStringLiteralDfa1_0(0xfffa0000000000L, 0x0L, 0x0L, 0x0L, 0x400000000000000L, 0x20040000000e0000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xff00000000000000L, 0x0L, 0x180000000000000L, 0x0L, 0x806000000000000L, 0x0L, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x1fffffL, 0x200000000000000L, 0x0L, 0x208000000000000L, 0x400b080000500000L, 0x10000200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x3ffe00000L, 0x400000000000000L, 0x0L, 0x6000000000L, 0x30000001a00000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x3fffc00000000L, 0x0L, 0x0L, 0x0L, 0x2000000L, 0x10L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fc000000000000L, 0x0L, 0x0L, 0x2000000000000000L, 0x4000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7800000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x7L, 0x0L, 0x0L, 0x40000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ffff8L, 0x0L, 0x1000010000000000L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L, 0x3f800000L, 0x0L, 0x40000000000000L, 0x210018000000L, 0x82L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ffc0000000L, 0x0L, 0x0L, 0x800000000000L, 0x20L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x87ffc0000000000L, 0x0L, 0x101a0000000000L, 0x20060000000L, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf000000000000000L, 0x7ffL, 0x8000000000000000L, 0x0L, 0x20000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fff800L, 0x8000000000L, 0x80100000000001L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8800000000L, 0x0L, 0x0L, 0xfffff8000000L, 0x4000000000000000L, 0x200000000000000L, 0x4L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x0L, 0xffff000000000000L, 0x2401800000ffL, 0x43f80000000L, 0x8000040L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3fff00L, 0x8000404000000000L, 0x101L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400403c00000L, 0x400000000000004L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1801804000000L, 0x800000000000002L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x80000038000000L, 0x1000008000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20000040000000L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x100000000000000L, 0x0L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 46:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 60:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x8004000000e00003L, active2, 0x4000c00c0400001L, active3, 0x3000038003800L, active4, 0x1801804000100L, active5, 0x4800920002600001L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x4000L, active4, 0x10080000000000L, active5, 0x4000080000000L, active6, 0x400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L, active5, 0x400000800000L, active6, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000d800000000L, active1, 0x800003f000000L, active2, 0x700300800002L, active3, 0x7c03ffc0000000L, active4, 0x4820004040000200L, active5, 0x2102001200001e0L, active6, 0x82L);
      case 70:
      case 102:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0x402000000000000L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1cL, active2, 0L, active3, 0x100000000000000L, active4, 0x2000000b8000400L, active5, 0x1003000200000000L, active6, 0x200L);
      case 73:
      case 105:
         if ((active4 & 0x400000L) != 0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x100000c0000000L, active2, 0x8000001c07000000L, active3, 0x80000000018000L, active4, 0x8004000001f800L, active5, 0x2001000100000aL, active6, 0x4L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0x820001c00000060L, active2, 0x300002000000000L, active3, 0x20000L, active4, 0x800c000000000000L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0x200000000000000L, active4, 0L, active5, 0L, active6, 0x10L);
      case 78:
      case 110:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0x6000000000L, active2, 0xfff80L, active3, 0L, active4, 0x1000010001800000L, active5, 0x400000000030004L, active6, 0L);
      case 79:
      case 111:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000000L, active1, 0x11c000000001ff80L, active2, 0xf03c038000004L, active3, 0xfc00000c0000L, active4, 0x2140002000000000L, active5, 0x4808005c100000L, active6, 0x8L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000001eL, active4, 0x500000000L, active5, 0xfe00L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3800000000000000L, active4, 0L, active5, 0L, active6, 0x8000000L);
      case 82:
      case 114:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x6200000200020000L, active2, 0L, active3, 0x3f000c0L, active4, 0x4080001c0000L, active5, 0x808000c000000000L, active6, 0x20000101L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x8000000000L, active2, 0x200000L, active3, 0L, active4, 0x2000000L, active5, 0x40000L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0xc000000000000100L, active4, 0x200000000001L, active5, 0x2000041c00000010L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2040022000000000L, active1, 0x4000000001c0000L, active2, 0x870000000000000L, active3, 0x4000200L, active4, 0x2000000001eL, active5, 0x100002000080000L, active6, 0x10000060L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0x100000000000L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x3ff0000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000e0L, active5, 0L, active6, 0L);
      case 124:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 1);
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         break;
      case 46:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000200000008cL, active2, 0x2L, active3, 0xc700000040100002L, active4, 0x220100000040000L, active5, 0x3009c40020000L, active6, 0x20000380L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0x106L, active5, 0x10000000000L, active6, 0x40L);
      case 67:
      case 99:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0xf8003000000L, active2, 0x3000008000200L, active3, 0x4000080000800L, active4, 0x40000000000008L, active5, 0x4000002000000L, active6, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L, active2, 0x14000000d80L, active3, 0x40L, active4, 0x400800001L, active5, 0x400000000080000L, active6, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100400020010L, active2, 0x8L, active3, 0x20040cL, active4, 0x8018000400L, active5, 0x9000000000000002L, active6, 0L);
      case 70:
      case 102:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x8L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x4000000L, active2, 0L, active3, 0L, active4, 0x4800000000000000L, active5, 0x10000000000000L, active6, 0x2L);
      case 71:
      case 103:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100100000000000L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0x40000000000L, active5, 0x18000000L, active6, 0x4L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0x80000000000L, active5, 0x80000010L, active6, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x600000000000L, active2, 0x2080000000000000L, active3, 0x9400000L, active4, 0x2000023080000L, active5, 0x180000000000004L, active6, 0x1L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x800000L) != 0L)
         {
            jjmatchedKind = 343;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x4000008000300L, active2, 0x30000000000000L, active3, 0x3018040600000000L, active4, 0x10000004000000L, active5, 0x441fe60L, active6, 0x8000020L);
      case 77:
      case 109:
         if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1c00L, active2, 0x840000106000020L, active3, 0L, active4, 0x2000001fa00L, active5, 0x200020000100000L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400040000000000L, active1, 0x41000000001e000L, active2, 0x21810000000L, active3, 0x810000000L, active4, 0x100000000000020L, active5, 0x280000000080L, active6, 0L);
      case 79:
      case 111:
         if ((active5 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x2a20000200000020L, active2, 0x300000020200000L, active3, 0x2800000L, active4, 0xc400180000000L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0x20000000018000L, active4, 0x200000L, active5, 0x8000000000000L, active6, 0x10L);
      case 82:
      case 114:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2006000000000L, active1, 0x1800000001c0000L, active2, 0x200000000L, active3, 0x3000L, active4, 0x2001a01800000000L, active5, 0x800140100000101L, active6, 0L);
      case 83:
      case 115:
         if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x80000018d0000003L, active2, 0x2000003000L, active3, 0x70000e0000L, active4, 0x10000000000000c0L, active5, 0x4060002021040000L, active6, 0x10000000L);
      case 84:
      case 116:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8260420000000000L, active1, 0x100b800020600000L, active2, 0x4000c000007c000L, active3, 0x8000004010L, active4, 0x480000000000000L, active5, 0x2000000000200000L, active6, 0x8L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L, active2, 0x4L, active3, 0L, active4, 0x2000100000L, active5, 0x4200000000L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0xc80001L, active3, 0x3030000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8200000000000L, active3, 0xf00000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L, active4, 0L, active5, 0x800000000000L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 2);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 46:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 3;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L, active4, 0x80L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x402000000000000L, active1, 0xb0008044020000L, active2, 0x8000000080000L, active3, 0x20000800001080L, active4, 0x40080400000000L, active5, 0xa200100001200000L, active6, 0x400L);
      case 66:
      case 98:
         if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800002000000000L, active2, 0xb40000100000000L, active3, 0L, active4, 0x2000000000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x508100000000011L, active2, 0L, active3, 0x1400000002000000L, active4, 0x9800000008L, active5, 0x20000000000000L, active6, 0L);
      case 68:
      case 100:
         if ((active5 & 0x80L) != 0L)
         {
            jjmatchedKind = 327;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x41L, active5, 0L, active6, 0x28000080L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x410000000000L, active1, 0x1870028000000L, active2, 0x140000000083d4a0L, active3, 0x200a010200010140L, active4, 0x440002000081f000L, active5, 0x404000080000011L, active6, 0L);
      case 70:
      case 102:
         if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0x200000000L, active3, 0x10100000L, active4, 0x80000L, active5, 0x200000000000L, active6, 0L);
      case 72:
      case 104:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 345;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x8L) != 0L)
         {
            jjmatchedKind = 387;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100005000000000L, active1, 0x1002000000L, active2, 0x4006000901L, active3, 0x2004000c0010L, active4, 0x200000000000L, active5, 0x810000000080000L, active6, 0x100L);
      case 75:
      case 107:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000L) != 0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000800000000L, active1, 0x80001000180L, active2, 0xa0002000200200L, active3, 0x200040004000000L, active4, 0x2000020000100L, active5, 0x800004020000L, active6, 0L);
      case 77:
      case 109:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x1L) != 0L)
         {
            jjmatchedKind = 384;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000c00L, active2, 0L, active3, 0x800000L, active4, 0L, active5, 0L, active6, 0x40L);
      case 78:
      case 110:
         if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000002000L, active2, 0x8L, active3, 0x400000000000L, active4, 0x40002040000L, active5, 0x1080004000000000L, active6, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0x3000000000000L, active3, 0x4021080400000L, active4, 0x810000100000020L, active5, 0x18040004L, active6, 0L);
      case 80:
      case 112:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0xa000100000L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L, active4, 0x1000000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20102000000000L, active1, 0x20000000c0008L, active2, 0x2000000000000000L, active3, 0x4100000000000408L, active4, 0x200900010000000L, active5, 0x3010400000100L, active6, 0x200L);
      case 83:
      case 115:
         if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x420000010c060L, active2, 0L, active3, 0x8200000L, active4, 0x4L, active5, 0x1fe60L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 374;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 376;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 382;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x2L) != 0L)
         {
            jjmatchedKind = 385;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x80000000L, active2, 0x420000002000L, active3, 0x8000800000002000L, active4, 0x1000000000000002L, active5, 0x81a20000000L, active6, 0x10000030L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000200L, active2, 0xc1800000000L, active3, 0xe000000000L, active4, 0x4000000L, active5, 0x40040000000L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x1000000L, active4, 0L, active5, 0x100000000L, active6, 0L);
      case 87:
      case 119:
         if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x2L) != 0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 371;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 3);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0x700000000000000L, active3, 0L, active4, 0L, active5, 0x10000L, active6, 0x200L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4800000000L, active1, 0x802000001000001L, active2, 0x2000202000L, active3, 0x201000808L, active4, 0x200800000000040L, active5, 0x800010000000000L, active6, 0x28000000L);
      case 66:
      case 98:
         if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0x200000L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000000900L, active3, 0x8000000000000L, active4, 0x100000000000L, active5, 0x2000044000040000L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L, active4, 0L, active5, 0x240000000L, active6, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 305;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x20L) != 0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1200102000000000L, active1, 0x400052580L, active2, 0x8c0000100000000L, active3, 0x402200000L, active4, 0x3000000004000009L, active5, 0x1000882920000000L, active6, 0L);
      case 70:
      case 102:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L, active5, 0x400000008000000L, active6, 0L);
      case 71:
      case 103:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0x80000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1800000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000000000L, active1, 0x80000800L, active2, 0x28000000000000L, active3, 0x8000000004022000L, active4, 0x1408000000000L, active5, 0x1000000040L, active6, 0xa0L);
      case 75:
      case 107:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80002000000000L, active2, 0x80000L, active3, 0x200006000011000L, active4, 0x2000000000L, active5, 0L, active6, 0x100L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000200L, active2, 0x1000000000000L, active3, 0x800100000L, active4, 0L, active5, 0x100080000000L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x4L) != 0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x10L) != 0L)
         {
            jjmatchedKind = 324;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 348;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x21000000000L, active1, 0x1000000000000L, active2, 0x1L, active3, 0x4000000000080L, active4, 0x200000000020L, active5, 0x10000000000001L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0x2000000000000000L, active3, 0x1000000000000010L, active4, 0x200L, active5, 0x20000004100100L, active6, 0x10000000L);
      case 80:
      case 112:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x78000000000L, active2, 0x2000000000000L, active3, 0x2000000800000L, active4, 0L, active5, 0x4008000000000L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0xfe00L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400008000000000L, active1, 0x800020001000L, active2, 0xc0000039000L, active3, 0x2020018080004500L, active4, 0x4800020000000080L, active5, 0x200000000000000L, active6, 0x400L);
      case 83:
      case 115:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x41000L, active5, 0x3000001000000L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x80000L) != 0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 375;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 383;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x4L) != 0L)
         {
            jjmatchedKind = 386;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40020000802c040L, active2, 0x1004000008L, active3, 0xc0000L, active4, 0x40400000004L, active5, 0x200400000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x180004000000L, active2, 0x200L, active3, 0x401000000002L, active4, 0x1000000L, active5, 0L, active6, 0x40L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L, active2, 0x400000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x10L) != 0L)
         {
            jjmatchedKind = 388;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0x2L, active5, 0x20000L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1e000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 4);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x400L);
      case 65:
      case 97:
         if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 351;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000040000000000L, active1, 0x2084000L, active2, 0x4c0000000800L, active3, 0x20040000000000L, active4, 0x3000001800040000L, active5, 0x4000200000L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0x8L, active2, 0x700002000000000L, active3, 0L, active4, 0L, active5, 0x800000000000000L, active6, 0L);
      case 67:
      case 99:
         if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x2000000002100L, active2, 0L, active3, 0L, active4, 0x200000000000000L, active5, 0L, active6, 0x200L);
      case 68:
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000001L, active2, 0x200L, active3, 0x1000000002000000L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 372;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200001000000000L, active1, 0x1040L, active2, 0x4004100L, active3, 0x4000L, active4, 0x4000000000080080L, active5, 0x3108000000000L, active6, 0L);
      case 70:
      case 102:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x40L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 347;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 301;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active5 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 381;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x400000000000000L, active2, 0x80028L, active3, 0x2000000000d0480L, active4, 0x20000000004L, active5, 0x400000040040000L, active6, 0x100L);
      case 75:
      case 107:
         if ((active5 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 377;
            jjmatchedPos = 5;
         }
         break;
      case 76:
      case 108:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x44000000L, active2, 0L, active3, 0x1000L, active4, 0L, active5, 0x1fe00L, active6, 0x40L);
      case 77:
      case 109:
         if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000000L, active6, 0x10000000L);
      case 78:
      case 110:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x800480040400L, active2, 0x2000L, active3, 0x20000L, active4, 0x1000000000000L, active5, 0x20002000000000L, active6, 0x80L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0x2000000000000L, active4, 0x1e000L, active5, 0x200000000L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0x800000000000L, active4, 0x2L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x100L) != 0L)
         {
            jjmatchedKind = 328;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1018000L, active2, 0x800000000000000L, active3, 0x2000001000200000L, active4, 0x200L, active5, 0x10100000000L, active6, 0L);
      case 83:
      case 115:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000080L, active2, 0x10000L, active3, 0x10600000000L, active4, 0x8000000008L, active5, 0x1001000000L, active6, 0x20L);
      case 84:
      case 116:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x1L) != 0L)
         {
            jjmatchedKind = 320;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x160000000000L, active2, 0x200400L, active3, 0x4001002008L, active4, 0x1040L, active5, 0L, active6, 0x28000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400100000L, active6, 0L);
      case 86:
      case 118:
         if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L, active5, 0x1000000000000000L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0L, active4, 0L, active5, 0x4000000L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000020L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 5);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L, active2, 0x800000000000000L, active3, 0x4400000000L, active4, 0L, active5, 0xfe00L, active6, 0L);
      case 65:
      case 97:
         if ((active6 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 411;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 413;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x800000000008L, active2, 0x700000000028020L, active3, 0L, active4, 0x100000001200L, active5, 0x40000L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active4 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 297;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x80000080L, active2, 0L, active3, 0x41000000000L, active4, 0x2000000000040000L, active5, 0L, active6, 0x400L);
      case 68:
      case 100:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0x400L, active4, 0x1000000000000000L, active5, 0L, active6, 0x10000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x20000L) != 0L)
         {
            jjmatchedKind = 337;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000010000L, active3, 0x1000L, active4, 0L, active5, 0x1000000900010000L, active6, 0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0x80L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active4 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x80L) != 0L)
         {
            jjmatchedKind = 391;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0xe0020000000L, active2, 0x2000000000200200L, active3, 0x2000000002000L, active4, 0x8000000000L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0x800000000000000L, active6, 0L);
      case 77:
      case 109:
         if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0x200000000010000L, active4, 0x400000000001e000L, active5, 0x420000000100000L, active6, 0x100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0x8L, active4, 0L, active5, 0x1000000L, active6, 0L);
      case 80:
      case 112:
         if ((active5 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L, active4, 0x1000000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x200L) != 0L)
         {
            jjmatchedKind = 393;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0x8L, active5, 0x200000L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 350;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 363;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0x2800L, active3, 0x20000000020000L, active4, 0x200000000000004L, active5, 0x3105000000000L, active6, 0x40L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x8000L, active2, 0L, active3, 0x2000000L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2c0000L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000L, active6, 0L);
      case 89:
      case 121:
         if ((active5 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 6);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000000000L, active5, 0L, active6, 0L);
      case 50:
         if ((active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 7;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000000080000L, active3, 0x80L, active4, 0L, active5, 0L, active6, 0x10000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L, active2, 0x18000L, active3, 0x4000000000L, active4, 0x4000000000000080L, active5, 0x1004800L, active6, 0L);
      case 68:
      case 100:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 340;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x200000L) != 0L)
         {
            jjmatchedKind = 341;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 358;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 378;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 379;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0xb0000L, active4, 0x20000000001e000L, active5, 0x20100000000000L, active6, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8L, active5, 0x2000000000000L, active6, 0L);
      case 71:
      case 103:
         if ((active6 & 0x100L) != 0L)
         {
            jjmatchedKind = 392;
            jjmatchedPos = 7;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L, active2, 0x2008L, active3, 0x400L, active4, 0L, active5, 0x1001000000000L, active6, 0x40L);
      case 75:
      case 107:
         if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 7;
         }
         break;
      case 76:
      case 108:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L, active4, 0L, active5, 0x200L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0x200L, active3, 0x2000000000000L, active4, 0L, active5, 0x800010000L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x30000000000L, active1, 0x60000000000L, active2, 0x200800L, active3, 0x400002000L, active4, 0x8000000000L, active5, 0x2000L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 380;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0x100000000200L, active5, 0x100000000L, active6, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
         }
         else if ((active6 & 0x400L) != 0L)
         {
            jjmatchedKind = 394;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L, active2, 0x700000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 7;
         }
         else if ((active6 & 0x20L) != 0L)
         {
            jjmatchedKind = 389;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x20108000000000L, active1, 0L, active2, 0x20L, active3, 0L, active4, 0x40000L, active5, 0x40000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4L, active5, 0x400L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000L, active6, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 7);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 50:
         if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 8;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0xc000000000L, active1, 0L, active2, 0L, active3, 0x1000L, active4, 0x1e000L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800000000002000L, active3, 0x4000000000L, active4, 0L, active5, 0x8000L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20001000000800L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 368;
            jjmatchedPos = 8;
         }
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x40000L) != 0L)
         {
            jjmatchedKind = 338;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 71:
      case 103:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L, active4, 0L, active5, 0x10000L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0x4000000000040000L, active5, 0x1000200L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x400010000000000L, active1, 0x40000000000L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0x400L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000000000L, active5, 0x2000000004000L, active6, 0L);
      case 80:
      case 112:
         if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000L, active6, 0L);
      case 82:
      case 114:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100100000000L, active6, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x81000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x40L);
      case 84:
      case 116:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L, active2, 0x80000L, active3, 0x80L, active4, 0x4L, active5, 0L, active6, 0x10000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x22000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x88L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 8);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4004L, active5, 0x1000000L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000L, active6, 0L);
      case 69:
      case 101:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x21000L, active4, 0L, active5, 0L, active6, 0x40L);
      case 70:
      case 102:
         if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800L, active6, 0L);
      case 71:
      case 103:
         if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 9;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L, active5, 0x400L, active6, 0L);
      case 76:
      case 108:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 9;
         }
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0x200L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0x40000L, active5, 0x100000000L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000002080L, active5, 0x2000000008000L, active6, 0L);
      case 83:
      case 115:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 356;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x22000000000L, active1, 0x20000000L, active2, 0x800000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         if ((active5 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 373;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x12000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 9);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4004L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 10;
         }
         else if ((active5 & 0x200L) != 0L)
         {
            jjmatchedKind = 329;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x40000e000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000L, active5, 0x4000L, active6, 0L);
      case 71:
      case 103:
         if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 10;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0x10000L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000L, active5, 0x2000L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L, active5, 0x800L, active6, 0L);
      case 77:
      case 109:
         if ((active5 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 369;
            jjmatchedPos = 10;
         }
         else if ((active6 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 412;
            jjmatchedPos = 10;
         }
         break;
      case 78:
      case 110:
         if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L, active4, 0L, active5, 0x8000L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0x2000000000010000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 10;
         }
         else if ((active5 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 10;
         }
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         if ((active5 & 0x400L) != 0L)
         {
            jjmatchedKind = 330;
            jjmatchedPos = 10;
         }
         else if ((active6 & 0x40L) != 0L)
         {
            jjmatchedKind = 390;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000L, active6, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(3, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 10);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x14000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L, active4, 0L, active5, 0x800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000L, active5, 0L);
      case 69:
      case 101:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 11;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 344;
            jjmatchedPos = 11;
         }
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active5 & 0x1000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000L);
      case 78:
      case 110:
         if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 11;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000L, active5, 0L);
      case 87:
      case 119:
         if ((active4 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 11;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 11);
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x1000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 12;
         }
         break;
      case 69:
      case 101:
         if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x400008000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L, active1, 0L, active3, 0L, active4, 0x2000L, active5, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x8000L);
      case 82:
      case 114:
         if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 12;
         }
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 12;
         }
         else if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x4000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x8000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 12);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x24000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x8000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active3, 0x1000L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active3, 0L, active4, 0x2000L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active5 & 0x800L) != 0L)
         {
            jjmatchedKind = 331;
            jjmatchedPos = 13;
         }
         break;
      case 84:
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active3, 0L, active4, 0x8000L, active5, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x4000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 13);
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 14;
         }
         else if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000L, active3, 0L, active4, 0L, active5, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 78:
      case 110:
         if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x4000L);
      case 83:
      case 115:
         if ((active5 & 0x8000L) != 0L)
         {
            jjmatchedKind = 335;
            jjmatchedPos = 14;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 14);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active5, 0x2000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active5, 0x10000L);
      case 69:
      case 101:
         if ((active5 & 0x4000L) != 0L)
         {
            jjmatchedKind = 334;
            jjmatchedPos = 15;
         }
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 15);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old5, long active5)
{
   if (((active0 &= old0) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 15);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 16;
         }
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active5, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active5, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 16);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old5, long active5)
{
   if (((active0 &= old0) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 16);
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000L, active5, 0x2000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active5, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 17);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old5, long active5)
{
   if (((active0 &= old0) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 17);
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active5, 0x10000L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 18;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active5, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 18);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old5, long active5)
{
   if (((active0 &= old0) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 18);
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active5, 0x10000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active5, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 19);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old5, long active5)
{
   if (((active0 &= old0) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 19);
   }
   switch(curChar)
   {
      case 76:
      case 108:
         if ((active5 & 0x2000L) != 0L)
         {
            jjmatchedKind = 333;
            jjmatchedPos = 20;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000000L, active5, 0L);
      case 83:
      case 115:
         if ((active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 20;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 20);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old5, long active5)
{
   if (((active0 &= old0) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(3, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 20);
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 21;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 21);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x100000000000000L, 0x80000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x60000L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x0L, 0x40L
};
static final long[] jjbitVec6 = {
   0x201000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x4L, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 109;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 403)
                        kind = 403;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x800800000000000L & l) != 0L)
                  {
                     if (kind > 415)
                        kind = 415;
                  }
                  else if ((0x400001000000000L & l) != 0L)
                  {
                     if (kind > 402)
                        kind = 402;
                     jjCheckNAdd(14);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(4, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(29);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if (curChar == 36)
                  {
                     if (kind > 402)
                        kind = 402;
                     jjCheckNAdd(16);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar != 45)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(13, 15);
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(13, 15);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 7:
                  if (curChar == 10 && kind > 30)
                     kind = 30;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 10:
                  if ((0x2400L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 11:
                  if (curChar == 10 && kind > 31)
                     kind = 31;
                  break;
               case 12:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x400001000000000L & l) == 0L)
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar != 36)
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 403)
                     kind = 403;
                  jjCheckNAddStates(0, 3);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 403)
                     kind = 403;
                  jjCheckNAddStates(16, 18);
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 26);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 403)
                     kind = 403;
                  jjCheckNAddStates(19, 21);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 403)
                     kind = 403;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 403)
                     kind = 403;
                  jjCheckNAddTwoStates(27, 25);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 403)
                     kind = 403;
                  jjCheckNAddStates(22, 24);
                  break;
               case 31:
               case 33:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 32:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 34:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
               case 68:
                  if (curChar == 39 && kind > 408)
                     kind = 408;
                  break;
               case 60:
                  if ((0x800800000000000L & l) != 0L && kind > 415)
                     kind = 415;
                  break;
               case 62:
               case 64:
                  if (curChar == 39)
                     jjCheckNAddStates(28, 30);
                  break;
               case 63:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 65:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  jjAddStates(31, 32);
                  break;
               case 70:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 72:
                  jjAddStates(33, 34);
                  break;
               case 74:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 75:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 76:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if (curChar == 62)
                     jjCheckNAdd(68);
                  break;
               case 78:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 79:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 80:
                  if ((0xfffffcffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar == 41)
                     jjCheckNAdd(68);
                  break;
               case 82:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 83:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 84:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (curChar == 47)
                     jjCheckNAdd(68);
                  break;
               case 86:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 87:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 88:
                  if ((0xfffffffdffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar == 33)
                     jjCheckNAdd(68);
                  break;
               case 90:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 91:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 92:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 93:
                  if (curChar == 35)
                     jjCheckNAdd(68);
                  break;
               case 94:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 95:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 12);
                  break;
               case 97:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 98:
                  if (curChar == 34 && kind > 402)
                     kind = 402;
                  break;
               case 99:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 100:
                  if (curChar == 34)
                     jjCheckNAddStates(37, 39);
                  break;
               case 102:
                  if (curChar == 34 && kind > 410)
                     kind = 410;
                  break;
               case 103:
                  if (curChar == 39)
                     jjCheckNAddStates(4, 8);
                  break;
               case 104:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 105:
                  if (curChar == 39 && kind > 407)
                     kind = 407;
                  break;
               case 106:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 107:
                  if (curChar == 39)
                     jjCheckNAddStates(40, 42);
                  break;
               case 108:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 402)
                        kind = 402;
                     jjCheckNAdd(16);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 402)
                        kind = 402;
                     jjCheckNAdd(14);
                  }
                  if ((0x2000000020000L & l) != 0L)
                     jjAddStates(43, 50);
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 1:
                  if (kind > 28)
                     kind = 28;
                  break;
               case 5:
                  if (kind > 30)
                     kind = 30;
                  jjAddStates(13, 15);
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(16);
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 53);
                  break;
               case 25:
                  if ((0x5000000050L & l) != 0L && kind > 403)
                     kind = 403;
                  break;
               case 30:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  jjCheckNAddStates(25, 27);
                  break;
               case 36:
                  if ((0x200000002L & l) != 0L && kind > 414)
                     kind = 414;
                  break;
               case 37:
               case 54:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x200000002000L & l) != 0L && kind > 414)
                     kind = 414;
                  break;
               case 44:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if ((0x2000000020000L & l) != 0L)
                     jjAddStates(43, 50);
                  break;
               case 63:
                  jjCheckNAddStates(28, 30);
                  break;
               case 66:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(67, 69);
                  break;
               case 67:
                  if ((0xffffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 69);
                  break;
               case 69:
                  if (curChar == 93)
                     jjCheckNAdd(68);
                  break;
               case 71:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 72:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if (curChar == 125)
                     jjCheckNAdd(68);
                  break;
               case 76:
                  jjAddStates(54, 55);
                  break;
               case 80:
                  jjAddStates(56, 57);
                  break;
               case 84:
                  jjAddStates(58, 59);
                  break;
               case 88:
                  jjAddStates(60, 61);
                  break;
               case 92:
                  jjAddStates(62, 63);
                  break;
               case 96:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 97:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 99:
                  jjAddStates(37, 39);
                  break;
               case 101:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 104:
                  jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 106:
                  jjCheckNAddStates(40, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 402)
                        kind = 402;
                     jjCheckNAdd(14);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 402)
                        kind = 402;
                     jjCheckNAdd(16);
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjAddStates(13, 15);
                  break;
               case 13:
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(14);
                  break;
               case 15:
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 402)
                     kind = 402;
                  jjCheckNAdd(16);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(25, 27);
                  break;
               case 63:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(28, 30);
                  break;
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(31, 32);
                  break;
               case 72:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(33, 34);
                  break;
               case 76:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(54, 55);
                  break;
               case 80:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(56, 57);
                  break;
               case 84:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(58, 59);
                  break;
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(60, 61);
                  break;
               case 92:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(62, 63);
                  break;
               case 96:
               case 97:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 99:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(37, 39);
                  break;
               case 104:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 106:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(40, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 109 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3()
{
   return 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   17, 18, 20, 25, 104, 105, 106, 108, 35, 96, 99, 101, 102, 5, 6, 8, 
   19, 20, 25, 22, 23, 25, 29, 20, 25, 32, 34, 35, 63, 65, 35, 67, 
   69, 72, 73, 97, 98, 99, 101, 102, 106, 108, 35, 62, 70, 74, 78, 82, 
   86, 90, 94, 21, 22, 26, 76, 77, 80, 81, 84, 85, 88, 89, 92, 93, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\57", "\100", "\56", "\73", "\50", "\54", "\51", "\56\56\56", "\72", 
"\75", "\45", "\56\56", "\74\74", "\76\76", "\41", "\74", "\76", "\53", "\55", 
"\174\174", "\52\52", "\52", "\75\76", "\50\52\51", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_SQL_STATEMENT_ENDED_SEMICOLON",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 1, 2, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffff801ffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfd8c07ffL, 
};
static final long[] jjtoSkip = {
   0x3ce000000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3c0000000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x430000000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[109];
private final int[] jjstateSet = new int[218];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PLSQLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PLSQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 109; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 34)
         {
            jjmatchedKind = 34;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 34)
         {
            jjmatchedKind = 34;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 34)
         {
            jjmatchedKind = 34;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
